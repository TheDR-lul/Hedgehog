// src/notifier/navigation.rs

use super::{Command, StateStorage, UserState, callback_data, RunningOperations}; // –î–æ–±–∞–≤–∏–ª–∏ RunningOperations
use crate::config::Config;
use crate::exchange::Exchange;
use crate::storage::Db;
use std::sync::Arc;
use teloxide::prelude::*;
use teloxide::types::{
    InlineKeyboardButton, InlineKeyboardMarkup, Message, MessageId, CallbackQuery, ChatId,
};
use teloxide::requests::Requester; // –î–æ–±–∞–≤–∏–ª–∏ Requester
use teloxide::utils::command::BotCommands; // –î–æ–±–∞–≤–∏–ª–∏ BotCommands
use tracing::{info, warn};

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const WELCOME_MESSAGE: &str = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Hedgehog Bot! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

/// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
pub fn make_main_menu_keyboard() -> InlineKeyboardMarkup {
    InlineKeyboardMarkup::new(vec![
        // –†—è–¥ 1: –ö–æ—à–µ–ª–µ–∫
        vec![
            InlineKeyboardButton::callback("üíº –ö–æ—à–µ–ª–µ–∫", callback_data::MENU_WALLET),
        ],
        // –†—è–¥ 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        vec![
            InlineKeyboardButton::callback("‚öôÔ∏è –ó–∞—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å", callback_data::START_HEDGE),
            InlineKeyboardButton::callback("üõ† –†–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å", callback_data::START_UNHEDGE),
        ],
        // –†—è–¥ 3: –ò–Ω—Ñ–æ –∏ –ê–∫—Ç–∏–≤–Ω—ã–µ
        vec![
             InlineKeyboardButton::callback("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data::MENU_INFO),
             InlineKeyboardButton::callback("‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data::MENU_ACTIVE_OPS),
        ],
    ])
}

/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Ok(Message) –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–≤–æ–µ, Ok(true) –µ—Å–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª, Err –ø—Ä–∏ –æ—à–∏–±–∫–µ
pub async fn show_main_menu(bot: &Bot, chat_id: ChatId, message_to_edit: Option<MessageId>)
    -> Result<Result<Message, bool>, teloxide::RequestError>
{
    let text = WELCOME_MESSAGE;
    let kb = make_main_menu_keyboard();

    if let Some(message_id) = message_to_edit {
        match bot.edit_message_text(chat_id, message_id, text).reply_markup(kb).await {
            Ok(_) => Ok(Ok(true)), // –£—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
            Err(e) => {
                warn!("Failed to edit message {} to main menu: {}. Sending new one.", message_id, e);
                // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
                bot.send_message(chat_id, text).reply_markup(kb).await.map(Err) // –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ
            }
        }
    } else {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(chat_id, text).reply_markup(kb).await.map(Err) // –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ
    }
}


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
pub async fn handle_start<E>(
    bot: Bot,
    msg: Message,
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è
    _exchange: Arc<E>, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    state_storage: StateStorage,
    _cfg: Arc<Config>,
    _db: Arc<Db>,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    info!("Processing /start command for chat_id: {}", chat_id);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    {
        let mut state_guard = state_storage.write().expect("Failed to lock state storage for write");
        // –ü–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–æ–∏—Ç –ø–æ–º–Ω–∏—Ç—å
        // (—Ö–æ—Ç—è –æ–±—ã—á–Ω–æ /start –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏)
        state_guard.insert(chat_id, UserState::None);
        info!("User state for {} reset to None.", chat_id);
    }

    // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    // cleanup_previous_bot_messages(&bot, chat_id, &state_storage).await; // –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø. –ª–æ–≥–∏–∫–∏

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π /start
    if let Err(e) = bot.delete_message(chat_id, msg.id).await {
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        warn!("Failed to delete /start command message: {}", e);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    let _ = show_main_menu(&bot, chat_id, None).await;

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (–≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
pub async fn handle_back_to_main(
    bot: Bot,
    q: CallbackQuery,
    state_storage: StateStorage,
) -> anyhow::Result<()> {
    if let Some(msg) = q.message {
        let chat_id = msg.chat().id;
        info!("Processing '{}' callback for chat_id: {}", callback_data::BACK_TO_MAIN, chat_id);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        {
            let mut state_guard = state_storage.write().expect("Failed to lock state storage for write");
            state_guard.insert(chat_id, UserState::None);
            info!("User state for {} reset to None.", chat_id);
        }

        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        let _ = show_main_menu(&bot, chat_id, Some(msg.id)).await;
    } else {
        warn!("CallbackQuery missing message in handle_back_to_main");
    }
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
    bot.answer_callback_query(q.id).await?;
    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –≤ –¥–∏–∞–ª–æ–≥–µ
pub async fn handle_cancel_dialog(
    bot: Bot,
    q: CallbackQuery,
    state_storage: StateStorage,
) -> anyhow::Result<()> {
     if let Some(msg) = q.message {
        let chat_id = msg.chat.id;
        info!("Processing '{}' callback for chat_id: {}", callback_data::CANCEL_DIALOG, chat_id);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        {
            let mut state_guard = state_storage.write().expect("Failed to lock state storage for write");
            state_guard.insert(chat_id, UserState::None);
             info!("User state for {} reset to None.", chat_id);
        }

        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        let text = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.";
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        let kb = InlineKeyboardMarkup::new(vec![vec![
            InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data::BACK_TO_MAIN)
        ]]);
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ)
        let _ = bot.edit_message_text(chat_id, msg.id, text).reply_markup(kb).await;

     } else {
         warn!("CallbackQuery missing message in handle_cancel_dialog");
     }
     // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
     bot.answer_callback_query(q.id).await?;
     Ok(())
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é (–±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π)

pub async fn handle_menu_wallet_callback<E>(
    bot: Bot, q: CallbackQuery, exchange: Arc<E>, cfg: Arc<Config>, db: Arc<Db>
) -> anyhow::Result<()> where E: Exchange + Clone + Send + Sync + 'static {
    info!("Callback '{}' triggered. Calling wallet_info handler...", callback_data::MENU_WALLET);
    // TODO: –í—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ wallet_info.rs –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ—à–µ–ª—å–∫–∞
    // wallet_info::show_wallet_summary(bot, q, exchange, cfg, db).await?;
    bot.answer_callback_query(q.id).text("–†–∞–∑–¥–µ–ª –ö–æ—à–µ–ª–µ–∫ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)").await?;
    Ok(())
}

pub async fn handle_menu_info_callback<E>(
    bot: Bot, q: CallbackQuery, exchange: Arc<E>, cfg: Arc<Config>, db: Arc<Db>
) -> anyhow::Result<()> where E: Exchange + Clone + Send + Sync + 'static {
     info!("Callback '{}' triggered. Calling market_info handler...", callback_data::MENU_INFO);
     // TODO: –í—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ market_info.rs –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Å—Ç–∞—Ç—É—Å, funding –∏ —Ç.–¥.)
     // market_info::show_info_menu(bot, q).await?;
     bot.answer_callback_query(q.id).text("–†–∞–∑–¥–µ–ª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)").await?;
    Ok(())
}

pub async fn handle_menu_active_ops_callback(
    bot: Bot, q: CallbackQuery, running_operations: RunningOperations, state_storage: StateStorage
) -> anyhow::Result<()> {
    info!("Callback '{}' triggered. Calling active_ops handler...", callback_data::MENU_ACTIVE_OPS);
    // TODO: –í—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ active_ops.rs –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    // active_ops::show_active_operations(bot, q, running_operations, state_storage).await?;
    bot.answer_callback_query(q.id).text("–†–∞–∑–¥–µ–ª –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)").await?;
    Ok(())
}