// src/notifier/navigation.rs

// <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω RunningOperations >>>
use super::{StateStorage, UserState, callback_data};
use crate::config::Config;
use crate::exchange::Exchange;
use crate::storage::Db;
use std::sync::Arc;
use teloxide::prelude::*;
use teloxide::types::{
    InlineKeyboardButton, InlineKeyboardMarkup, Message, MessageId, CallbackQuery, ChatId,
};
use teloxide::requests::Requester;
use tracing::{info, warn};

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const WELCOME_MESSAGE: &str = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Hedgehog Bot! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

/// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
pub fn make_main_menu_keyboard() -> InlineKeyboardMarkup {
    InlineKeyboardMarkup::new(vec![
        vec![
            InlineKeyboardButton::callback("üíº –ö–æ—à–µ–ª–µ–∫", callback_data::MENU_WALLET),
        ],
        vec![
            InlineKeyboardButton::callback("‚öôÔ∏è –ó–∞—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å", callback_data::START_HEDGE),
            InlineKeyboardButton::callback("üõ† –†–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å", callback_data::START_UNHEDGE),
        ],
        vec![
             InlineKeyboardButton::callback("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data::MENU_INFO),
             InlineKeyboardButton::callback("‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data::MENU_ACTIVE_OPS),
        ],
    ])
}

/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
pub async fn show_main_menu(bot: &Bot, chat_id: ChatId, message_to_edit: Option<MessageId>)
    -> Result<(), teloxide::RequestError>
{
    let text = WELCOME_MESSAGE;
    let kb = make_main_menu_keyboard();

    if let Some(message_id) = message_to_edit {
        match bot.edit_message_text(chat_id, message_id, text).reply_markup(kb.clone()).await {
            Ok(_) => Ok(()),
            Err(e) => {
                warn!("Failed to edit message {} to main menu: {}. Sending new one.", message_id, e);
                bot.send_message(chat_id, text).reply_markup(kb).await?;
                Ok(())
            }
        }
    } else {
        bot.send_message(chat_id, text).reply_markup(kb).await?;
        Ok(())
    }
}


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
pub async fn handle_start<E>(
    bot: Bot,
    msg: Message,
    _exchange: Arc<E>,
    state_storage: StateStorage, // –¢–∏–ø StateStorage —É–∂–µ Arc<TokioRwLock<...>> –∏–∑ mod.rs
    _cfg: Arc<Config>,
    _db: Arc<Db>,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    info!("Processing /start command for chat_id: {}", chat_id);

    {
        // <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º .await >>>
        let mut state_guard = state_storage.write().await;
        state_guard.insert(chat_id, UserState::None);
        info!("User state for {} reset to None.", chat_id);
    } // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ state_guard –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è –∑–¥–µ—Å—å

    if let Err(e) = bot.delete_message(chat_id, msg.id).await {
        warn!("Failed to delete /start command message: {}", e);
    }

    let _ = show_main_menu(&bot, chat_id, None).await;

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" (–≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)
pub async fn handle_back_to_main(
    bot: Bot,
    q: CallbackQuery,
    state_storage: StateStorage, // –¢–∏–ø StateStorage —É–∂–µ Arc<TokioRwLock<...>>
) -> anyhow::Result<()> {
    if let Some(msg) = q.message.as_ref() {
        let chat_id = msg.chat().id;
        info!("Processing '{}' callback for chat_id: {}", callback_data::BACK_TO_MAIN, chat_id);

        {
            // <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º .await >>>
            let mut state_guard = state_storage.write().await;
            state_guard.insert(chat_id, UserState::None);
            info!("User state for {} reset to None.", chat_id);
        } // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ state_guard –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è –∑–¥–µ—Å—å

        let _ = show_main_menu(&bot, chat_id, Some(msg.id())).await;
    } else {
        warn!("CallbackQuery missing message in handle_back_to_main");
    }
    bot.answer_callback_query(q.id).await?;
    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –≤ –¥–∏–∞–ª–æ–≥–µ
pub async fn handle_cancel_dialog(
    bot: Bot,
    chat_id: ChatId,
    message_id: MessageId,
    state_storage: StateStorage, // –¢–∏–ø StateStorage —É–∂–µ Arc<TokioRwLock<...>>
) -> anyhow::Result<()> {
    info!("Processing cancel dialog for chat_id: {}", chat_id);

    {
        // <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º .await >>>
        let mut state_guard = state_storage.write().await;
        state_guard.insert(chat_id, UserState::None);
         info!("User state for {} reset to None.", chat_id);
    } // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ state_guard –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç—Å—è –∑–¥–µ—Å—å

    let _ = show_main_menu(&bot, chat_id, Some(message_id)).await;

    // –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–ª–±—ç–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
    Ok(())
}


// --- –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
// (–ó–∞–≥–ª—É—à–∫–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç state_storage, –ø–æ—ç—Ç–æ–º—É –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π)

pub async fn handle_menu_wallet_callback<E>(
    bot: Bot, q: CallbackQuery, _exchange: Arc<E>, _cfg: Arc<Config>, _db: Arc<Db>
) -> anyhow::Result<()> where E: Exchange + Clone + Send + Sync + 'static {
    info!("Callback '{}' triggered. Calling wallet_info handler...", callback_data::MENU_WALLET);
    bot.answer_callback_query(q.id).text("–†–∞–∑–¥–µ–ª –ö–æ—à–µ–ª–µ–∫ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)").await?;
    Ok(())
}

pub async fn handle_menu_info_callback<E>(
    bot: Bot, q: CallbackQuery, _exchange: Arc<E>, _cfg: Arc<Config>, _db: Arc<Db>
) -> anyhow::Result<()> where E: Exchange + Clone + Send + Sync + 'static {
      info!("Callback '{}' triggered. Calling market_info handler...", callback_data::MENU_INFO);
      bot.answer_callback_query(q.id).text("–†–∞–∑–¥–µ–ª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)").await?;
    Ok(())
}

// <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π RunningOperations –∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –∏ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã >>>
use super::RunningOperations; // –£–±—Ä–∞–Ω –∏–∑ –∏–º–ø–æ—Ä—Ç–∞ super
pub async fn handle_menu_active_ops_callback(
    bot: Bot, q: CallbackQuery, _running_operations: RunningOperations, _state_storage: StateStorage
) -> anyhow::Result<()> {
    info!("Callback '{}' triggered. Calling active_ops handler...", callback_data::MENU_ACTIVE_OPS);
    bot.answer_callback_query(q.id).text("–†–∞–∑–¥–µ–ª –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)").await?;
    Ok(())
}