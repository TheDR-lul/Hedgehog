// src/notifier/callbacks.rs

use crate::config::Config;
use crate::exchange::{Exchange, types::OrderSide}; // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
use crate::storage::{
    Db, get_completed_unhedged_ops_for_symbol, get_hedge_operation_by_id,
    update_hedge_final_status, HedgeOperation, // –î–æ–±–∞–≤–ª—è–µ–º HedgeOperation –¥–ª—è —Ç–∏–ø–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
};
use crate::hedger::Hedger;
use super::{UserState, StateStorage, RunningHedges};
use crate::hedger::ORDER_FILL_TOLERANCE;
use teloxide::prelude::*;
use teloxide::types::{CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, MessageId};
use tracing::{info, warn, error};
use chrono::{DateTime, Utc, TimeZone, LocalResult};
use std::sync::Arc; // –î–ª—è RwLock

// --- –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø CALLBACK DATA ---
const ACTION_STATUS: &str = "status";
const ACTION_WALLET: &str = "wallet";
const ACTION_BALANCE_CMD: &str = "balance"; // –î–ª—è –∫–Ω–æ–ø–∫–∏ "–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É"
const ACTION_FUNDING_CMD: &str = "funding"; // –î–ª—è –∫–Ω–æ–ø–∫–∏ "–≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É"
const ACTION_HEDGE: &str = "hedge";
const ACTION_UNHEDGE: &str = "unhedge";
const ACTION_CANCEL_DIALOG: &str = "cancel"; // –û–±—â–∞—è –æ—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞
const ACTION_CANCEL_HEDGE_ACTIVE: &str = "cancel_hedge_active"; // –û—Ç–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ö–µ–¥–∂–∞
const PAYLOAD_CANCEL_HEDGE: &str = "hedge"; // Payload –¥–ª—è cancel_hedge
const PREFIX_UNHEDGE_SELECT: &str = "unhedge_select_";
const PREFIX_CANCEL_HEDGE_ACTIVE: &str = "cancel_hedge_active_";
// --- –ö–û–ù–ï–¶ –ö–û–ù–°–¢–ê–ù–¢ ---

// TODO: –§—É–Ω–∫—Ü–∏—è cleanup_chat –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ handle_callback.
// –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.
#[allow(dead_code)] // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–º –∫–æ–¥–µ
async fn cleanup_chat(bot: &Bot, chat_id: ChatId, user_msg_id: MessageId, bot_msg_id: Option<i32>) {
    if let Some(id_int) = bot_msg_id {
        if let Err(e) = bot.delete_message(chat_id, MessageId(id_int)).await {
            warn!("Failed to delete previous bot message {}: {}", id_int, e);
        }
    }
    if let Err(e) = bot.delete_message(chat_id, user_msg_id).await {
        warn!("Failed to delete user message {}: {}", user_msg_id, e);
    }
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ ---
async fn get_formatted_balances<E: Exchange>(exchange: &E, quote_currency: &str) -> Result<(String, Vec<(String, f64, f64)>), anyhow::Error> {
    let balances = exchange.get_all_balances().await?;
    let mut text = "üíº –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n".to_string();
    let mut found_assets = false;
    let mut sorted_balances: Vec<_> = balances.into_iter().collect();
    sorted_balances.sort_by_key(|(coin, _)| coin.clone());

    let mut asset_data = Vec::new(); // –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–∞—Ö

    for (coin, bal) in sorted_balances {
        if bal.free > ORDER_FILL_TOLERANCE || bal.locked > ORDER_FILL_TOLERANCE || coin == quote_currency {
            text.push_str(&format!( "‚Ä¢ {}: Ô∏èfree {:.8}, locked {:.8}\n", coin, bal.free, bal.locked ));
            asset_data.push((coin, bal.free, bal.locked)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            found_assets = true;
        }
    }
    if !found_assets {
        text = "‚ÑπÔ∏è –í–∞—à –∫–æ—à–µ–ª–µ–∫ –ø—É—Å—Ç.".to_string();
    }
    Ok((text, asset_data))
}
// --- –ö–û–ù–ï–¶ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ---


pub async fn handle_callback<E>(
    bot: Bot,
    q: CallbackQuery,
    exchange: E,
    state_storage: StateStorage,
    cfg: Config,
    running_hedges: RunningHedges,
    db: &Db,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let callback_id = q.id.clone(); // –ö–ª–æ–Ω–∏—Ä—É–µ–º ID —Å—Ä–∞–∑—É
    let q_debug_info = format!("{:?}", q); // –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º if let –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if let (Some(data), Some(message)) = (q.data, q.message) {
        let chat_id = message.chat().id;
        let message_id = message.id();
        //let callback_id = q.id.clone();

        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å
        bot.answer_callback_query(callback_id.clone()) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
            .await
            .map_err(|e| warn!("Failed to answer callback query {}: {}", callback_id, e))
            .ok(); // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º if let –¥–ª—è –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        let (action, payload) = if let Some((act, pay)) = data.split_once('_') {
            (act, Some(pay.to_string()))
        } else {
            (data.as_str(), None) // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –Ω–µ—Ç, –≤—Å—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ action
        };

        // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ RwLock: .expect() –∑–∞–ø–∞–Ω–∏–∫—É–µ—Ç –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –ª–æ–∫ "–æ—Ç—Ä–∞–≤–ª–µ–Ω".
        // –í production –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å .unwrap_or_else(|poisoned| poisoned.into_inner())
        // –∏–ª–∏ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –ø–∞–Ω–∏–∫–∞ –ø–æ—Ç–æ–∫–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞.
        // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º expect –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã.

        match action {
            ACTION_STATUS => {
                let mut exchange_clone_for_check = exchange.clone();
                let status_text = match exchange_clone_for_check.check_connection().await {
                    Ok(_) => "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ.".to_string(),
                    Err(e) => format!("‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∏—Ä–∂–µ: {}", e),
                };
                bot.edit_message_text(chat_id, message_id, status_text)
                    .await
                    .map_err(|e| warn!("Failed to edit status message: {}", e))
                    .ok();
            }
            ACTION_WALLET => {
                info!("Fetching wallet balance via callback for chat_id: {}", chat_id);
                match get_formatted_balances(&exchange, &cfg.quote_currency).await {
                    Ok((text, _)) => { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ö –∑–¥–µ—Å—å
                        bot.edit_message_text(chat_id, message_id, text)
                           .await
                           .map_err(|e| warn!("Failed to edit wallet message: {}", e))
                           .ok();
                    }
                    Err(e) => {
                        warn!("Failed to fetch wallet balance via callback: {}", e);
                        bot.edit_message_text(chat_id, message_id, format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {}", e))
                           .await
                           .map_err(|e| warn!("Failed to edit wallet error message: {}", e))
                           .ok();
                    }
                }
            }
            ACTION_BALANCE_CMD => {
                bot.edit_message_text(chat_id, message_id, "–í–≤–µ–¥–∏—Ç–µ: /balance <SYMBOL>")
                   .await
                   .map_err(|e| warn!("Failed to edit balance cmd hint: {}", e))
                   .ok();
            }
            ACTION_FUNDING_CMD => {
                bot.edit_message_text(chat_id, message_id, "–í–≤–µ–¥–∏—Ç–µ: /funding <SYMBOL> [days]")
                   .await
                   .map_err(|e| warn!("Failed to edit funding cmd hint: {}", e))
                   .ok();
            }

            act @ (ACTION_HEDGE | ACTION_UNHEDGE) if payload.is_none() => {
                 let action_type = act.to_string(); // act –∑–¥–µ—Å—å –±—É–¥–µ—Ç "hedge" –∏–ª–∏ "unhedge"
                 let action_text = if action_type == ACTION_HEDGE { "—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è" } else { "—Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è" };
                 info!("Showing asset selection for '{}' via button for chat_id: {}", action_text, chat_id);

                 let mut buttons: Option<Vec<Vec<InlineKeyboardButton>>> = None;
                 let mut error_message: Option<String> = None;
                 let mut should_set_state = false;

                 match get_formatted_balances(&exchange, &cfg.quote_currency).await {
                     Ok((_, asset_data)) => { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ö
                         let mut btn_list = vec![];
                         for (coin, free, locked) in asset_data {
                             // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º quote_currency –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
                             if !(action_type == ACTION_UNHEDGE && coin == cfg.quote_currency) {
                                 let callback_data = format!("{}_{}", action_type, coin); // –ò—Å–ø–æ–ª—å–∑—É–µ–º action_type
                                 btn_list.push(vec![InlineKeyboardButton::callback(
                                     format!("ü™ô {} (free: {:.8}, locked: {:.8})", coin, free, locked),
                                     callback_data,
                                 )]);
                             }
                         }

                         if btn_list.is_empty() {
                             error_message = Some(format!("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ –¥–ª—è {}.", action_text));
                             let mut state = state_storage.write().expect("Lock failed"); // –ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–∏
                             state.insert(chat_id, UserState::None);
                         } else {
                             btn_list.push(vec![InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", format!("{}_{}", ACTION_CANCEL_DIALOG, PAYLOAD_CANCEL_HEDGE))]);
                             buttons = Some(btn_list);
                             should_set_state = true;
                         }
                     }
                     Err(e) => {
                         warn!("Failed fetch balances for asset selection: {}", e);
                         error_message = Some(format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤: {}", e));
                         let mut state = state_storage.write().expect("Lock failed"); // –ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–∏
                         state.insert(chat_id, UserState::None);
                     }
                 }

                 if let Some(btns) = buttons {
                     let kb = InlineKeyboardMarkup::new(btns);
                     if let Err(e) = bot.edit_message_text(chat_id, message_id, format!("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è {}:", action_text)).reply_markup(kb).await {
                         warn!("Failed edit message for asset selection: {}", e);
                         should_set_state = false; // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                         let mut state = state_storage.write().expect("Lock failed"); // –ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–∏
                         state.insert(chat_id, UserState::None);
                     }
                 } else if let Some(err_msg) = error_message {
                      bot.edit_message_text(chat_id, message_id, err_msg)
                         .await
                         .map_err(|e| warn!("Failed edit error message for asset selection: {}", e))
                         .ok();
                 }

                 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∞–∑–∞–Ω—ã
                 if should_set_state {
                     let mut state = state_storage.write().expect("Lock failed"); // –ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–∏
                     // –ö–ª–æ–Ω–∏—Ä—É–µ–º action_type –æ–¥–∏–Ω —Ä–∞–∑ –∑–¥–µ—Å—å
                     state.insert(chat_id, UserState::AwaitingAssetSelection { action_type: action_type.clone(), last_bot_message_id: Some(message_id.0), });
                     info!("User state set to AwaitingAssetSelection for '{}'", action_type);
                 }
            }

            // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ ---
            act @ (ACTION_HEDGE | ACTION_UNHEDGE) if payload.is_some() => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
                if data.starts_with(PREFIX_UNHEDGE_SELECT) {
                    // –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –Ω–∏–∂–µ
                } else if let Some(sym) = payload { // –ò—Å–ø–æ–ª—å–∑—É–µ–º if let –¥–ª—è payload
                    let mut user_state_valid = false;
                    let mut expected_action = String::new();
                    { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á—Ç–µ–Ω–∏—è
                        let state_guard = state_storage.read().expect("Lock failed"); // –ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–∏
                        if let Some(UserState::AwaitingAssetSelection { action_type, .. }) = state_guard.get(&chat_id) {
                            user_state_valid = true;
                            expected_action = action_type.clone();
                        }
                    }

                    if user_state_valid && expected_action == act {
                        info!("User {} selected asset {} for '{}'", chat_id, sym, act);
                        let mut next_state: Option<UserState> = None;
                        let mut message_text: Option<String> = None;
                        let mut keyboard_for_edit: Option<InlineKeyboardMarkup> = None;
                        let mut new_message_with_kb: Option<(String, InlineKeyboardMarkup)> = None;

                        if act == ACTION_HEDGE {
                            next_state = Some(UserState::AwaitingSum { symbol: sym.clone(), last_bot_message_id: Some(message_id.0) });
                            message_text = Some(format!("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {} –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è {}:", cfg.quote_currency, sym));
                            keyboard_for_edit = Some(InlineKeyboardMarkup::new(vec![vec![
                                InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", format!("{}_{}", ACTION_CANCEL_DIALOG, PAYLOAD_CANCEL_HEDGE))
                            ]]));
                            info!("User state for {} set to AwaitingSum", chat_id);
                        } else if act == ACTION_UNHEDGE {
                            info!("Looking for hedges for {} after asset selection for chat_id {}", sym, chat_id);
                            match get_completed_unhedged_ops_for_symbol(db, chat_id.0, &sym).await {
                                Ok(operations) => {
                                    if operations.is_empty() {
                                        message_text = Some(format!("‚ÑπÔ∏è –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è {}.", sym));
                                        next_state = Some(UserState::None);
                                    } else if operations.len() == 1 {
                                        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                                        let op_to_unhedge = operations.into_iter().next().unwrap(); // –ë–µ–∑–æ–ø–∞—Å–Ω–æ, —Ç.–∫. len == 1
                                        let op_id = op_to_unhedge.id;
                                        info!("Found single op_id: {}. Starting unhedge directly.", op_id);
                                        message_text = Some(format!("‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ ID:{} ({})...", op_id, sym));
                                        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
                                        spawn_unhedge_task(bot.clone(), exchange.clone(), cfg.clone(), db.clone(), chat_id, message_id, op_to_unhedge);
                                        next_state = Some(UserState::None); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                                    } else {
                                        info!("Found {} ops for {}. Prompting selection.", operations.len(), sym);
                                        let mut buttons: Vec<Vec<InlineKeyboardButton>> = Vec::new();
                                        let mut sorted_ops = operations.clone(); // –ö–ª–æ–Ω–∏—Ä—É–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                                        sorted_ops.sort_by_key(|op| std::cmp::Reverse(op.id)); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–∫–∞–∑–∞

                                        for op in &sorted_ops {
                                            // --- –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–±—Ä–∞–±–æ—Ç–∫–∞ LocalResult ---
                                            let timestamp_dt = match Utc.timestamp_opt(op.start_timestamp, 0) {
                                                LocalResult::Single(dt) => dt,
                                                LocalResult::None => {
                                                    warn!("Invalid timestamp {} found for op_id {}", op.start_timestamp, op.id);
                                                    Utc.timestamp_millis_opt(0).unwrap() // –ù–∞—á–∞–ª–æ —ç–ø–æ—Ö–∏ –∫–∞–∫ fallback
                                                }
                                                LocalResult::Ambiguous(min, max) => {
                                                    warn!("Ambiguous timestamp {} found for op_id {} (between {} and {})", op.start_timestamp, op.id, min, max);
                                                    min // –í—ã–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ –≤—Ä–µ–º—è
                                                }
                                            };
                                            // --- –ö–û–ù–ï–¶ –£–õ–£–ß–®–ï–ù–ò–Ø ---
                                            let date_str = timestamp_dt.format("%Y-%m-%d %H:%M").to_string();
                                            let label = format!("ID:{} {:.6} {} ({})", op.id, op.target_futures_qty, op.base_symbol, date_str);
                                            let callback_data = format!("{}{}", PREFIX_UNHEDGE_SELECT, op.id); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
                                            buttons.push(vec![InlineKeyboardButton::callback(label, callback_data)]);
                                        }
                                        buttons.push(vec![InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", format!("{}_{}", ACTION_CANCEL_DIALOG, PAYLOAD_CANCEL_HEDGE))]);
                                        let kb = InlineKeyboardMarkup::new(buttons);
                                        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞
                                        message_text = Some(format!("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è {}. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:", sym));
                                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
                                        new_message_with_kb = Some(("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è:".to_string(), kb));
                                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                                        next_state = Some(UserState::AwaitingUnhedgeSelection { symbol: sym.clone(), operations, last_bot_message_id: None }); // ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø–∏—à–µ—Ç—Å—è –Ω–∏–∂–µ
                                        info!("Set state AwaitingUnhedgeSelection for {}", chat_id);
                                    }
                                }
                                Err(e) => {
                                    error!("DB query failed for unhedge ops: {}", e);
                                    message_text = Some(format!("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∏–∑ –ë–î: {}", e));
                                    next_state = Some(UserState::None);
                                }
                            }
                        } else {
                            // –≠—Ç–∞ –≤–µ—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –¥–æ—Å—Ç–∏–≥–∞—Ç—å—Å—è –∏–∑-–∑–∞ `act @ (ACTION_HEDGE | ACTION_UNHEDGE)`
                            warn!("Invalid action type '{}' in asset selection callback", act);
                            message_text = Some("‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è).".to_string());
                            next_state = Some(UserState::None);
                        }

                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
                            let mut state_guard = state_storage.write().expect("Lock failed"); // –ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–∏
                            if let Some(ref state_to_set) = next_state {
                                state_guard.insert(chat_id, state_to_set.clone());
                            }
                        }

                        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞)
                        if let Some(text_to_edit) = message_text {
                            // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å—É–º–º—ã
                            let final_kb = keyboard_for_edit.unwrap_or_else(|| InlineKeyboardMarkup::new(vec![vec![]]));
                            bot.edit_message_text(chat_id, message_id, text_to_edit)
                               .reply_markup(final_kb)
                               .await
                               .map_err(|e| warn!("Failed to edit message after asset selection: {}", e))
                               .ok();
                        }

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if let Some((new_text, new_kb)) = new_message_with_kb {
                            match bot.send_message(chat_id, new_text).reply_markup(new_kb).await {
                                Ok(new_msg) => {
                                    // –û–±–Ω–æ–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ AwaitingUnhedgeSelection
                                    let mut state_guard = state_storage.write().expect("Lock failed"); // –ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–∏
                                    if let Some(UserState::AwaitingUnhedgeSelection { last_bot_message_id, .. }) = state_guard.get_mut(&chat_id) {
                                        let last_bot_message_id = last_bot_message_id.as_mut();
                                        if let Some(last_bot_message_id) = last_bot_message_id {
                                            *last_bot_message_id = new_msg.id.0;
                                        }
                                        info!("Updated last_bot_message_id for AwaitingUnhedgeSelection to {}", new_msg.id.0);
                                    } else {
                                        warn!("State changed before updating last_bot_message_id for unhedge selection");
                                    }
                                }
                                Err(e) => {
                                    error!("Failed send unhedge selection message: {}", e);
                                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                                    let mut state = state_storage.write().expect("Lock failed"); // –ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–∏
                                    state.insert(chat_id, UserState::None);
                                }
                            }
                        }
                    } else {
                        warn!("User {} clicked asset {} but state mismatch (expected '{}', action was '{}') or invalid state.", chat_id, sym, expected_action, act);
                        bot.edit_message_text(chat_id, message_id, "‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                           .reply_markup(InlineKeyboardMarkup::new(vec![vec![]])) // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                           .await
                           .map_err(|e| warn!("Failed to edit state mismatch message: {}", e))
                           .ok();
                        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        let mut state = state_storage.write().expect("Lock failed"); // –ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏–∏
                        state.insert(chat_id, UserState::None);
                    }
                } else {
                    // payload –±—ã–ª None, –Ω–æ —ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∏–∑-–∑–∞ `if payload.is_some()` –≤—ã—à–µ
                     warn!("Callback for action '{}' received with None payload unexpectedly.", act);
                }
            }

            // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è ---
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º starts_with –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞
            action if action == ACTION_UNHEDGE && data.starts_with(PREFIX_UNHEDGE_SELECT) => {
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                if let Some(op_id_str) = data.strip_prefix(PREFIX_UNHEDGE_SELECT) {
                    if let Ok(op_id) = op_id_str.parse::<i64>() {
                        info!("User {} selected hedge operation ID {} to unhedge.", chat_id, op_id);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å AwaitingUnhedgeSelection)
                        let mut operation_to_unhedge: Option<HedgeOperation> = None;
                        let mut state_valid = false;
                        { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á—Ç–µ–Ω–∏—è
                            let state_guard = state_storage.read().expect("Lock failed");
                            if let Some(UserState::AwaitingUnhedgeSelection { operations, .. }) = state_guard.get(&chat_id) {
                                state_valid = true;
                                // –ò—â–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
                                operation_to_unhedge = operations.iter().find(|op| op.id == op_id).cloned();
                            }
                        }

                        if state_valid {
                            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            { let mut state = state_storage.write().expect("Lock failed"); state.insert(chat_id, UserState::None); }

                            match operation_to_unhedge {
                                Some(op) => {
                                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—é
                                    // (—Ö–æ—Ç—è get_completed_unhedged_ops_for_symbol —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å)
                                    if op.chat_id != chat_id.0 || op.status != "Completed" || op.unhedged_op_id.is_some() {
                                        error!("User {} attempted invalid op {} (status: {}, unhedged: {:?})", chat_id, op_id, op.status, op.unhedged_op_id);
                                        bot.edit_message_text(chat_id, message_id, "‚ùå –í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É–∂–µ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∞.")
                                           .reply_markup(InlineKeyboardMarkup::new(vec![vec![]])) // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                                           .await
                                           .map_err(|e| warn!("Failed edit invalid unhedge op message: {}", e))
                                           .ok();
                                    } else {
                                        let symbol = op.base_symbol.clone();
                                        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
                                        bot.edit_message_text(chat_id, message_id, format!("‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ ID:{} ({})...", op_id, symbol))
                                           .reply_markup(InlineKeyboardMarkup::new(vec![vec![]])) // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                                           .await
                                           .map_err(|e| warn!("Failed edit starting unhedge message: {}", e))
                                           .ok();
                                        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
                                        spawn_unhedge_task(bot.clone(), exchange.clone(), cfg.clone(), db.clone(), chat_id, message_id, op);
                                    }
                                }
                                None => {
                                    // –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ
                                    error!("Op ID {} not found in user state for chat_id {}", op_id, chat_id);
                                    bot.edit_message_text(chat_id, message_id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º –≤—ã–±–æ—Ä–µ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ.")
                                       .reply_markup(InlineKeyboardMarkup::new(vec![vec![]]))
                                       .await
                                       .map_err(|e| warn!("Failed edit op not found in state message: {}", e))
                                       .ok();
                                }
                            }
                        } else {
                             warn!("User {} clicked unhedge selection but state was not AwaitingUnhedgeSelection.", chat_id);
                             bot.edit_message_text(chat_id, message_id, "‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤ —Å–Ω–æ–≤–∞.")
                                .reply_markup(InlineKeyboardMarkup::new(vec![vec![]]))
                                .await
                                .map_err(|e| warn!("Failed edit state mismatch message for unhedge selection: {}", e))
                                .ok();
                             // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                             { let mut state = state_storage.write().expect("Lock failed"); state.insert(chat_id, UserState::None); }
                        }
                    } else {
                        error!("Failed to parse op_id from callback data: {}", data);
                        bot.edit_message_text(chat_id, message_id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫–Ω–æ–ø–∫–µ.")
                           .reply_markup(InlineKeyboardMarkup::new(vec![vec![]]))
                           .await
                           .map_err(|e| warn!("Failed edit invalid op_id message: {}", e))
                           .ok();
                    }
                } else {
                     error!("Callback data '{}' starts with '{}' but strip_prefix failed.", data, PREFIX_UNHEDGE_SELECT);
                }
            }


            // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞/–≤—ã–±–æ—Ä–∞ ---
            ACTION_CANCEL_DIALOG if payload.as_deref() == Some(PAYLOAD_CANCEL_HEDGE) => {
                info!("User {} cancelled dialog.", chat_id);
                { let mut state = state_storage.write().expect("Lock failed"); state.insert(chat_id, UserState::None); } // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                bot.edit_message_text(chat_id, message_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                   .reply_markup(InlineKeyboardMarkup::new(vec![vec![]])) // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                   .await
                   .map_err(|e| warn!("Failed edit cancel dialog message: {}", e))
                   .ok();
            }

            // --- –û—Ç–º–µ–Ω–∞ –ó–ê–ü–£–©–ï–ù–ù–û–ì–û —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è ---
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º starts_with –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞
            ACTION_CANCEL_HEDGE_ACTIVE if data.starts_with(PREFIX_CANCEL_HEDGE_ACTIVE) => {
                // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
                if let Some(symbol) = data.strip_prefix(PREFIX_CANCEL_HEDGE_ACTIVE) {
                    if symbol.is_empty() {
                        error!("Could not extract symbol from cancel active hedge callback: {}", data);
                        bot.answer_callback_query(callback_id).text("–û—à–∏–±–∫–∞: —Å–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.").await.ok();
                        return Ok(());
                    }
                    let symbol = symbol.to_string(); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ String
                    info!("User {} requested cancellation of active hedge for symbol: {}", chat_id, symbol);

                    let mut hedge_info_opt = None;
                    let mut current_order_id_to_cancel: Option<String> = None;
                    let mut reported_filled_qty: f64 = 0.0;
                    let mut operation_id_to_cancel: Option<i64> = None;

                    // –ë–ª–æ–∫–∏—Ä—É–µ–º –º—å—é—Ç–µ–∫—Å –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–π
                    { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                        let mut hedges_guard = running_hedges.lock().await;
                        // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–µ–¥–∂–µ
                        if let Some(info) = hedges_guard.remove(&(chat_id, symbol.clone())) {
                            // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º—å—é—Ç–µ–∫—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                            current_order_id_to_cancel = info.current_order_id.lock().await.clone();
                            reported_filled_qty = *info.total_filled_qty.lock().await;
                            operation_id_to_cancel = Some(info.operation_id);
                            hedge_info_opt = Some(info); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è abort –∏ message_id
                        }
                    } // –ú—å—é—Ç–µ–∫—Å running_hedges —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω

                    if let (Some(hedge_info), Some(operation_id)) = (hedge_info_opt, operation_id_to_cancel) {
                        info!("Found active hedge op_id: {}. Aborting task...", operation_id);
                        hedge_info.handle.abort(); // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è

                        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ —Ö–µ–¥–∂–∞
                        bot.edit_message_text(chat_id, MessageId(hedge_info.bot_message_id), format!("‚è≥ –û—Ç–º–µ–Ω—è—é —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ ID:{} {}...", operation_id, symbol))
                           .reply_markup(InlineKeyboardMarkup::new(vec![vec![]])) // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
                           .await
                           .map_err(|e| warn!("op_id:{}: Failed edit cancelling message: {}", operation_id, e))
                           .ok();

                        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã (–æ—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞, –ø—Ä–æ–¥–∞–∂–∞ —Å–ø–æ—Ç–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î)
                        let exchange_clone = exchange.clone();
                        let bot_clone = bot.clone();
                        let cleanup_chat_id = chat_id;
                        let cleanup_message_id = MessageId(hedge_info.bot_message_id);
                        let cleanup_symbol = hedge_info.symbol.clone();
                        let db_clone = db.clone();

                        tokio::spawn(async move {
                            let mut cancel_order_success = false;
                            let mut sell_success = false;
                            let mut sell_attempted = false;
                            let mut qty_to_actually_sell = 0.0;
                            let mut final_error_msg: Option<String> = None;

                            // 1. –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –±–∏—Ä–∂–µ (–µ—Å–ª–∏ –æ–Ω –±—ã–ª)
                            if let Some(ref order_id) = current_order_id_to_cancel {
                                info!("op_id:{}: Cancelling futures order {}", operation_id, order_id);
                                match exchange_clone.cancel_order(&cleanup_symbol, order_id).await {
                                    Ok(_) => {
                                        cancel_order_success = true;
                                        info!("op_id:{}: Cancel futures order OK {}", operation_id, order_id);
                                        // –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï: –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω—ã –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞,
                                        // —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω–æ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∞ –Ω–µ –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ reported_filled_qty,
                                        // –∫–æ—Ç–æ—Ä–æ–µ –º–æ–≥–ª–æ –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω–æ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π.
                                        // –≠—Ç–æ —É—Å–ª–æ–∂–Ω–∏—Ç –ª–æ–≥–∏–∫—É, —Ç.–∫. –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –æ—Ä–¥–µ—Ä–∞.
                                    }
                                    Err(e) => {
                                        warn!("op_id:{}: Cancel futures order FAILED {}: {}", operation_id, order_id, e);
                                        // –û—Ä–¥–µ—Ä –º–æ–≥ —É–∂–µ –∏—Å–ø–æ–ª–Ω–∏—Ç—å—Å—è –∏–ª–∏ –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–º —Ä–∞–Ω–µ–µ.
                                        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ –±—É–¥–µ–º –ø–æ–ª–∞–≥–∞—Ç—å—Å—è –Ω–∞ reported_filled_qty.
                                        final_error_msg = Some(format!("Failed to cancel futures order {}: {}", order_id, e));
                                    }
                                }
                            } else {
                                // –ê–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –±—ã–ª–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —Ö–µ–¥–∂ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –º–µ–∂–¥—É –∫–ª–∏–∫–æ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π)
                                cancel_order_success = true; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, —Ç.–∫. –æ—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ
                                info!("op_id:{}: No active futures order ID to cancel.", operation_id);
                            }

                            // 2. –ü—Ä–æ–¥–∞–∂–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ —Å–ø–æ—Ç–µ (–µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ)
                            if reported_filled_qty > ORDER_FILL_TOLERANCE {
                                sell_attempted = true;
                                info!("op_id:{}: Reported filled qty {}. Checking spot balance...", operation_id, reported_filled_qty);
                                match exchange_clone.get_balance(&cleanup_symbol).await {
                                    Ok(balance) => {
                                        // –ü—Ä–æ–¥–∞–µ–º –º–∏–Ω–∏–º—É–º –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –±—ã–ª–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ –ø–æ –æ—Ç—á–µ—Ç—É, –∏ —Ç–æ–≥–æ, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
                                        qty_to_actually_sell = reported_filled_qty.min(balance.free);
                                        info!("op_id:{}: Spot balance free {}, will try to sell {}", operation_id, balance.free, qty_to_actually_sell);
                                        if qty_to_actually_sell > ORDER_FILL_TOLERANCE {
                                            match exchange_clone.place_spot_market_order(&cleanup_symbol, OrderSide::Sell, qty_to_actually_sell).await {
                                                Ok(order) => {
                                                    sell_success = true;
                                                    info!("op_id:{}: Spot Sell OK: order_id={}", operation_id, order.id);
                                                }
                                                Err(e) => {
                                                    error!("op_id:{}: Spot Sell FAILED: {}", operation_id, e);
                                                    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–æ–¥–∞–∂–∏
                                                    final_error_msg = Some(format!("Failed to sell filled spot quantity: {}", e));
                                                }
                                            }
                                        } else {
                                            warn!("op_id:{}: Available spot balance ({}) is too small or less than reported filled qty, skipping sell.", operation_id, balance.free);
                                            qty_to_actually_sell = 0.0; // –ù–µ –ø—Ä–æ–¥–∞–ª–∏ –Ω–∏—á–µ–≥–æ
                                        }
                                    }
                                    Err(e) => {
                                        error!("op_id:{}: Failed get spot balance for {}: {}. Skipping sell.", operation_id, cleanup_symbol, e);
                                        sell_attempted = false; // –ù–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–∞—Ç—å
                                        final_error_msg = Some(format!("Failed to get spot balance: {}", e));
                                    }
                                }
                            } else {
                                info!("op_id:{}: No filled qty reported ({}), skipping spot sell.", operation_id, reported_filled_qty);
                            }

                            // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ë–î
                            let final_db_status = "Cancelled";
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                            if let Err(e) = update_hedge_final_status(&db_clone, operation_id, final_db_status, None, qty_to_actually_sell, final_error_msg.as_deref()).await {
                                error!("op_id:{}: Failed DB update after cancellation: {}", operation_id, e);
                                // –≠—Ç–∞ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω–∞, –Ω–æ –º—ã —É–∂–µ –Ω–µ –º–æ–∂–µ–º –æ—Ç–∫–∞—Ç–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –±–∏—Ä–∂–µ. –õ–æ–≥–∏—Ä—É–µ–º.
                            } else {
                                info!("op_id:{}: Updated DB status to '{}', sold_spot_qty: {}", operation_id, final_db_status, qty_to_actually_sell);
                            }

                            // 4. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                            let final_text = if sell_attempted {
                                format!(
                                    "‚ùå –•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ ID:{} {} –æ—Ç–º–µ–Ω–µ–Ω–æ.\n–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–∞—Ç—å {:.8} {} –Ω–∞ —Å–ø–æ—Ç–µ {}",
                                    operation_id, cleanup_symbol, qty_to_actually_sell, cleanup_symbol,
                                    if sell_success { "—É—Å–ø–µ—à–Ω–∞." } else { "–Ω–µ —É–¥–∞–ª–∞—Å—å." }
                                )
                            } else {
                                format!("‚ùå –•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ ID:{} {} –æ—Ç–º–µ–Ω–µ–Ω–æ.", operation_id, cleanup_symbol)
                            };
                            if let Err(e) = bot_clone.edit_message_text(cleanup_chat_id, cleanup_message_id, final_text).await {
                                warn!("op_id:{}: Failed edit final cancel message: {}", operation_id, e);
                            }
                        });
                    } else {
                        // –•–µ–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ `running_hedges` - –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∏–ª–∏ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω —Ä–∞–Ω–µ–µ
                        warn!("No active hedge task found for chat_id: {}, symbol: {} during cancellation request.", chat_id, symbol);
                        bot.edit_message_text(chat_id, message_id, format!("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–æ–µ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è {} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ).", symbol))
                           .reply_markup(InlineKeyboardMarkup::new(vec![vec![]])) // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É
                           .await
                           .map_err(|e| warn!("Failed edit hedge not found message: {}", e))
                           .ok();
                    }
                } else {
                     error!("Callback data '{}' starts with '{}' but strip_prefix failed.", data, PREFIX_CANCEL_HEDGE_ACTIVE);
                }
            }


            // --- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback ---
            _ => {
                warn!("Received unknown callback action: '{}' with payload: {:?}", action, payload);
                // –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                bot.answer_callback_query(q.id).text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.").await.ok();
            }
        } // –ö–æ–Ω–µ—Ü match action

    } else {
        // –°–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ CallbackQuery
        warn!("Callback query without data or message received: {}", q_debug_info);

        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–ª–±—ç–∫, –µ—Å–ª–∏ –µ—Å—Ç—å ID
        if !callback_id.is_empty() { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
            bot.answer_callback_query(callback_id).await.ok();
        }
    } // –ö–æ–Ω–µ—Ü if let (Some(data), Some(message))

    Ok(())
} // –ö–æ–Ω–µ—Ü handle_callback


// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è ---
fn spawn_unhedge_task<E>(
    bot: Bot,
    exchange: E,
    cfg: Config,
    db: Db,
    chat_id: ChatId,
    message_id: MessageId, // ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å
    op_to_unhedge: HedgeOperation,
) where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let hedger = Hedger::new(exchange, cfg);
    let op_id = op_to_unhedge.id;
    let symbol = op_to_unhedge.base_symbol.clone();

    tokio::spawn(async move {
        match hedger.run_unhedge(op_to_unhedge, &db).await {
            Ok((sold, bought)) => {
                info!("Unhedge OK op_id: {}", op_id);
                let text = format!(
                    "‚úÖ –†–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} (ID:{}) –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n\nüü¢ –°–ø–æ—Ç –ø—Ä–æ–¥–∞–Ω–æ: {:.8}\nüî¥ –§—å—é—á –∫—É–ø–ª–µ–Ω–æ: {:.8}",
                    symbol, op_id, sold, bought
                );
                bot.edit_message_text(chat_id, message_id, text)
                   .await
                   .map_err(|e| warn!("op_id:{}: Failed edit success unhedge message: {}", op_id, e))
                   .ok();
            }
            Err(e) => {
                error!("Unhedge FAILED op_id: {}: {}", op_id, e);
                bot.edit_message_text(chat_id, message_id, format!("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è ID:{}: {}", op_id, e))
                   .await
                   .map_err(|e| warn!("op_id:{}: Failed edit error unhedge message: {}", op_id, e))
                   .ok();
            }
        }
    });
}
// --- –ö–û–ù–ï–¶ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ---
