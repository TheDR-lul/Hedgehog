// src/notifier/wallet_info.rs

use super::{Command, StateStorage, UserState, callback_data, RunningOperations}; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ mod.rs
use crate::config::Config;
use crate::exchange::{Exchange, Balance}; // –î–æ–±–∞–≤–ª–µ–Ω Balance
use crate::storage::Db;
use crate::hedger::ORDER_FILL_TOLERANCE; // –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
use std::sync::Arc;
use teloxide::prelude::*;
use teloxide::types::{
    InlineKeyboardButton, InlineKeyboardMarkup, Message, MessageId, CallbackQuery, ChatId, // –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∏–ø—ã
};
use teloxide::utils::command::BotCommands; // –î–ª—è Command::descriptions
use tracing::{info, warn, error};

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∏–∑ callbacks.rs) ---

/// –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞ + –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
pub async fn get_formatted_balances<E: Exchange>(
    exchange: &E,
    quote_currency: &str,
    include_approx_value: bool, // –§–ª–∞–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
) -> Result<(String, Vec<(String, f64, f64)>), anyhow::Error> {
    info!("Fetching all balances from exchange...");
    let balances = exchange.get_all_balances().await?;
    info!("Received {} balance entries.", balances.len());

    let mut text = "üíº –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n".to_string();
    let mut found_assets = false;
    let mut sorted_balances: Vec<_> = balances.into_iter().collect();
    sorted_balances.sort_by_key(|(coin, _)| coin.clone());

    let mut asset_data = Vec::new(); // –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–∞—Ö

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
    let mut prices: std::collections::HashMap<String, f64> = std::collections::HashMap::new();
    if include_approx_value {
        info!("Fetching prices for value approximation...");
        for (coin, _) in &sorted_balances {
             if coin != quote_currency {
                match exchange.get_spot_price(coin).await {
                    Ok(price) => { prices.insert(coin.clone(), price); },
                    Err(e) => warn!("Could not fetch price for {}: {}", coin, e), // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                }
             }
        }
        info!("Fetched {} prices.", prices.len());
    }

    for (coin, balance) in sorted_balances {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–ª–∏ –∑–∞–ª–æ—á–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∏–ª–∏ —ç—Ç–æ quote_currency
        if balance.free > ORDER_FILL_TOLERANCE || balance.locked > ORDER_FILL_TOLERANCE || coin == quote_currency {
            let mut line = format!(
                "‚Ä¢ {}: Ô∏èfree {:.8}, locked {:.8}",
                coin, balance.free, balance.locked
            );

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏ —Ü–µ–Ω–∞ –µ—Å—Ç—å
            if include_approx_value && coin != quote_currency {
                 if let Some(price) = prices.get(&coin) {
                     let total_qty = balance.free + balance.locked;
                     if total_qty > ORDER_FILL_TOLERANCE && *price > 0.0 {
                         let value = total_qty * price;
                         line.push_str(&format!(" (‚âà {:.2} {})", value, quote_currency));
                     }
                 }
            }
            line.push('\n');
            text.push_str(&line);
            asset_data.push((coin.clone(), balance.free, balance.locked)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            found_assets = true;
        }
    }

    if !found_assets {
        text = "‚ÑπÔ∏è –í–∞—à –∫–æ—à–µ–ª–µ–∫ –ø—É—Å—Ç.".to_string();
    }
    Ok((text, asset_data))
}


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /wallet
pub async fn handle_wallet_command<E>(
    bot: Bot,
    msg: Message,
    exchange: Arc<E>,
    _state_storage: StateStorage, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    cfg: Arc<Config>,
    _db: Arc<Db>, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    info!("Processing /wallet command for chat_id: {}", chat_id);
    let indicator_msg = bot.send_message(chat_id, "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞...").await?; // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è

    match get_formatted_balances(exchange.as_ref(), &cfg.quote_currency, true).await { // –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        Ok((text, _)) => {
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            bot.edit_message_text(chat_id, indicator_msg.id, text).await?;
        }
        Err(e) => {
            error!("Failed to fetch wallet balance for chat_id: {}: {}", chat_id, e);
            let error_text = format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {}", e);
             bot.edit_message_text(chat_id, indicator_msg.id, error_text).await?;
        }
    }

     // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /wallet
     if let Err(e) = bot.delete_message(chat_id, msg.id).await {
         warn!("Failed to delete /wallet command message: {}", e);
     }

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance SYMBOL
pub async fn handle_balance_command<E>(
    bot: Bot,
    msg: Message,
    symbol_arg: String,
    exchange: Arc<E>,
    _state_storage: StateStorage, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    _cfg: Arc<Config>, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    _db: Arc<Db>, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
) -> anyhow::Result<()>
where
     E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    let symbol = symbol_arg.trim().to_uppercase();

    if symbol.is_empty() {
        bot.send_message(chat_id, format!("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {}\n–ü—Ä–∏–º–µ—Ä: /balance BTC", Command::descriptions().get_command_description("balance").unwrap_or("/balance <SYMBOL>"))).await?;
        // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
         if let Err(e) = bot.delete_message(chat_id, msg.id).await {
             warn!("Failed to delete invalid /balance command message: {}", e);
         }
        return Ok(());
    }

     info!("Processing /balance {} command for chat_id: {}", symbol, chat_id);
     let indicator_msg = bot.send_message(chat_id, format!("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {}...", symbol)).await?;

    match exchange.get_balance(&symbol).await {
        Ok(balance) => {
            let text = format!("üí∞ {}: free {:.8}, locked {:.8}", symbol, balance.free, balance.locked);
            bot.edit_message_text(chat_id, indicator_msg.id, text).await?;
        }
        Err(e) => {
            error!("Failed to fetch balance for {} for chat_id: {}: {}", symbol, chat_id, e);
            let error_text = format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å {}: {}", symbol, e);
             bot.edit_message_text(chat_id, indicator_msg.id, error_text).await?;
        }
    }

     // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /balance
     if let Err(e) = bot.delete_message(chat_id, msg.id).await {
         warn!("Failed to delete /balance command message: {}", e);
     }

    Ok(())
}


/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–æ—à–µ–ª–µ–∫" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
pub async fn handle_menu_wallet_callback<E>(
    bot: Bot,
    q: CallbackQuery,
    exchange: Arc<E>,
    cfg: Arc<Config>,
    _db: Arc<Db>, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    if let Some(msg) = q.message {
        let chat_id = msg.chat.id;
        info!("Processing '{}' callback for chat_id: {}", callback_data::MENU_WALLET, chat_id);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let indicator_text = "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞...";
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Å—Ä–∞–∑—É
        let kb = InlineKeyboardMarkup::new(vec![vec![
            InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::BACK_TO_MAIN)
        ]]);
        bot.edit_message_text(chat_id, msg.id, indicator_text)
           .reply_markup(kb.clone()) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–æ–Ω –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞
           .await?; // –ó–¥–µ—Å—å –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω–∞, —Ç.–∫. —Å–ª–µ–¥. —à–∞–≥ —Ç–æ–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç

        match get_formatted_balances(exchange.as_ref(), &cfg.quote_currency, true).await { // –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            Ok((text, _)) => {
                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                bot.edit_message_text(chat_id, msg.id, text)
                   .reply_markup(kb) // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞ –∂–µ
                   .await?;
            }
            Err(e) => {
                error!("Failed to fetch wallet balance via callback for chat_id: {}: {}", chat_id, e);
                let error_text = format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {}", e);
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                bot.edit_message_text(chat_id, msg.id, error_text)
                   .reply_markup(kb) // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞ –∂–µ
                   .await?;
            }
        }
    } else {
        warn!("CallbackQuery missing message in handle_menu_wallet_callback");
    }
     // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
     bot.answer_callback_query(q.id).await?;
    Ok(())
}

// TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–±—ç–∫–∞ "–±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã" (–µ—Å–ª–∏ —Ä–µ—à–∏—Ç–µ –¥–µ–ª–∞—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏,
// –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /balance). –û–Ω –º–æ–∂–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤–≤–æ–¥ —Ç–∏–∫–µ—Ä–∞.// src/notifier/wallet_info.rs

use super::{Command, StateStorage, UserState, callback_data, RunningOperations}; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ mod.rs
use crate::config::Config;
use crate::exchange::{Exchange, Balance}; // –î–æ–±–∞–≤–ª–µ–Ω Balance
use crate::storage::Db;
use crate::hedger::ORDER_FILL_TOLERANCE; // –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
use std::sync::Arc;
use teloxide::prelude::*;
use teloxide::types::{
    InlineKeyboardButton, InlineKeyboardMarkup, Message, MessageId, CallbackQuery, ChatId, // –î–æ–±–∞–≤–ª–µ–Ω—ã —Ç–∏–ø—ã
};
use teloxide::utils::command::BotCommands; // –î–ª—è Command::descriptions
use tracing::{info, warn, error};

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –∏–∑ callbacks.rs) ---

/// –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å—ã –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞ + –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
pub async fn get_formatted_balances<E: Exchange>(
    exchange: &E,
    quote_currency: &str,
    include_approx_value: bool, // –§–ª–∞–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏
) -> Result<(String, Vec<(String, f64, f64)>), anyhow::Error> {
    info!("Fetching all balances from exchange...");
    let balances = exchange.get_all_balances().await?;
    info!("Received {} balance entries.", balances.len());

    let mut text = "üíº –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n".to_string();
    let mut found_assets = false;
    let mut sorted_balances: Vec<_> = balances.into_iter().collect();
    sorted_balances.sort_by_key(|(coin, _)| coin.clone());

    let mut asset_data = Vec::new(); // –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ç–∏–≤–∞—Ö

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å, –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã
    let mut prices: std::collections::HashMap<String, f64> = std::collections::HashMap::new();
    if include_approx_value {
        info!("Fetching prices for value approximation...");
        for (coin, _) in &sorted_balances {
             if coin != quote_currency {
                match exchange.get_spot_price(coin).await {
                    Ok(price) => { prices.insert(coin.clone(), price); },
                    Err(e) => warn!("Could not fetch price for {}: {}", coin, e), // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
                }
             }
        }
        info!("Fetched {} prices.", prices.len());
    }

    for (coin, balance) in sorted_balances {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–ª–∏ –∑–∞–ª–æ—á–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∏–ª–∏ —ç—Ç–æ quote_currency
        if balance.free > ORDER_FILL_TOLERANCE || balance.locked > ORDER_FILL_TOLERANCE || coin == quote_currency {
            let mut line = format!(
                "‚Ä¢ {}: Ô∏èfree {:.8}, locked {:.8}",
                coin, balance.free, balance.locked
            );

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏ —Ü–µ–Ω–∞ –µ—Å—Ç—å
            if include_approx_value && coin != quote_currency {
                 if let Some(price) = prices.get(&coin) {
                     let total_qty = balance.free + balance.locked;
                     if total_qty > ORDER_FILL_TOLERANCE && *price > 0.0 {
                         let value = total_qty * price;
                         line.push_str(&format!(" (‚âà {:.2} {})", value, quote_currency));
                     }
                 }
            }
            line.push('\n');
            text.push_str(&line);
            asset_data.push((coin.clone(), balance.free, balance.locked)); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            found_assets = true;
        }
    }

    if !found_assets {
        text = "‚ÑπÔ∏è –í–∞—à –∫–æ—à–µ–ª–µ–∫ –ø—É—Å—Ç.".to_string();
    }
    Ok((text, asset_data))
}


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /wallet
pub async fn handle_wallet_command<E>(
    bot: Bot,
    msg: Message,
    exchange: Arc<E>,
    _state_storage: StateStorage, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    cfg: Arc<Config>,
    _db: Arc<Db>, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    info!("Processing /wallet command for chat_id: {}", chat_id);
    let indicator_msg = bot.send_message(chat_id, "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞...").await?; // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è

    match get_formatted_balances(exchange.as_ref(), &cfg.quote_currency, true).await { // –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        Ok((text, _)) => {
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            bot.edit_message_text(chat_id, indicator_msg.id, text).await?;
        }
        Err(e) => {
            error!("Failed to fetch wallet balance for chat_id: {}: {}", chat_id, e);
            let error_text = format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {}", e);
             bot.edit_message_text(chat_id, indicator_msg.id, error_text).await?;
        }
    }

     // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /wallet
     if let Err(e) = bot.delete_message(chat_id, msg.id).await {
         warn!("Failed to delete /wallet command message: {}", e);
     }

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance SYMBOL
pub async fn handle_balance_command<E>(
    bot: Bot,
    msg: Message,
    symbol_arg: String,
    exchange: Arc<E>,
    _state_storage: StateStorage, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    _cfg: Arc<Config>, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    _db: Arc<Db>, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
) -> anyhow::Result<()>
where
     E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    let symbol = symbol_arg.trim().to_uppercase();

    if symbol.is_empty() {
        bot.send_message(chat_id, format!("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {}\n–ü—Ä–∏–º–µ—Ä: /balance BTC", Command::descriptions().get_command_description("balance").unwrap_or("/balance <SYMBOL>"))).await?;
        // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
         if let Err(e) = bot.delete_message(chat_id, msg.id).await {
             warn!("Failed to delete invalid /balance command message: {}", e);
         }
        return Ok(());
    }

     info!("Processing /balance {} command for chat_id: {}", symbol, chat_id);
     let indicator_msg = bot.send_message(chat_id, format!("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {}...", symbol)).await?;

    match exchange.get_balance(&symbol).await {
        Ok(balance) => {
            let text = format!("üí∞ {}: free {:.8}, locked {:.8}", symbol, balance.free, balance.locked);
            bot.edit_message_text(chat_id, indicator_msg.id, text).await?;
        }
        Err(e) => {
            error!("Failed to fetch balance for {} for chat_id: {}: {}", symbol, chat_id, e);
            let error_text = format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å {}: {}", symbol, e);
             bot.edit_message_text(chat_id, indicator_msg.id, error_text).await?;
        }
    }

     // –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /balance
     if let Err(e) = bot.delete_message(chat_id, msg.id).await {
         warn!("Failed to delete /balance command message: {}", e);
     }

    Ok(())
}


/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–æ—à–µ–ª–µ–∫" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
pub async fn handle_menu_wallet_callback<E>(
    bot: Bot,
    q: CallbackQuery,
    exchange: Arc<E>,
    cfg: Arc<Config>,
    _db: Arc<Db>, // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    if let Some(msg) = q.message {
        let chat_id = msg.chat.id;
        info!("Processing '{}' callback for chat_id: {}", callback_data::MENU_WALLET, chat_id);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        let indicator_text = "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞...";
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Å—Ä–∞–∑—É
        let kb = InlineKeyboardMarkup::new(vec![vec![
            InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::BACK_TO_MAIN)
        ]]);
        bot.edit_message_text(chat_id, msg.id, indicator_text)
           .reply_markup(kb.clone()) // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–æ–Ω –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞
           .await?; // –ó–¥–µ—Å—å –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω–∞, —Ç.–∫. —Å–ª–µ–¥. —à–∞–≥ —Ç–æ–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç

        match get_formatted_balances(exchange.as_ref(), &cfg.quote_currency, true).await { // –í–∫–ª—é—á–∞–µ–º —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            Ok((text, _)) => {
                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                bot.edit_message_text(chat_id, msg.id, text)
                   .reply_markup(kb) // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞ –∂–µ
                   .await?;
            }
            Err(e) => {
                error!("Failed to fetch wallet balance via callback for chat_id: {}: {}", chat_id, e);
                let error_text = format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {}", e);
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
                bot.edit_message_text(chat_id, msg.id, error_text)
                   .reply_markup(kb) // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–∞ –∂–µ
                   .await?;
            }
        }
    } else {
        warn!("CallbackQuery missing message in handle_menu_wallet_callback");
    }
     // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏
     bot.answer_callback_query(q.id).await?;
    Ok(())
}

// TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ª–±—ç–∫–∞ "–±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã" (–µ—Å–ª–∏ —Ä–µ—à–∏—Ç–µ –¥–µ–ª–∞—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏,
// –∞ –Ω–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /balance). –û–Ω –º–æ–∂–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤–≤–æ–¥ —Ç–∏–∫–µ—Ä–∞.