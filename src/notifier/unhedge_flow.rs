// src/notifier/unhedge_flow.rs

use super::{
    StateStorage, UserState, RunningOperations, callback_data, navigation, // –£–±—Ä–∞–Ω—ã OperationType, wallet_info
    // progress,
    // utils,
};
use crate::config::Config;
use crate::exchange::Exchange;
use crate::storage::{
    Db, HedgeOperation, get_completed_unhedged_ops_for_symbol,
    get_all_completed_unhedged_ops, get_hedge_operation_by_id,
};
use crate::hedger::Hedger; // –£–±—Ä–∞–Ω—ã {}
use std::{collections::HashMap, sync::Arc};
use chrono::{Utc, TimeZone, LocalResult};
// use tokio::sync::Mutex as TokioMutex;
use teloxide::prelude::*;
use teloxide::types::{
    InlineKeyboardButton, InlineKeyboardMarkup, Message, MessageId, CallbackQuery, ChatId,
    // MaybeInaccessibleMessage // <<<--- –£–ë–†–ê–ù –ù–ï–ò–°–ü–û–õ–¨–ó–£–ï–ú–´–ô –ò–ú–ü–û–†–¢
};
// use teloxide::utils::command::BotCommands;
use tracing::{info, warn, error};


// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --- (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

/// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞ –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
fn make_unhedge_asset_selection_keyboard(available_symbols: &[String]) -> InlineKeyboardMarkup {
    let mut sorted_symbols = available_symbols.to_vec();
    sorted_symbols.sort();

    let mut buttons: Vec<Vec<InlineKeyboardButton>> = sorted_symbols
        .iter()
        .map(|symbol| {
            let callback_data_asset = format!("{}{}", callback_data::PREFIX_UNHEDGE_ASSET, symbol);
            vec![InlineKeyboardButton::callback(
                format!("ü™ô {}", symbol),
                callback_data_asset,
            )]
        })
        .collect();

    buttons.push(vec![InlineKeyboardButton::callback(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data::BACK_TO_MAIN,
    )]);
    buttons.push(vec![InlineKeyboardButton::callback(
        "‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data::CANCEL_DIALOG,
    )]);
    InlineKeyboardMarkup::new(buttons)
}

/// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
fn make_unhedge_selection_keyboard(operations: &[HedgeOperation]) -> InlineKeyboardMarkup {
    let mut buttons: Vec<Vec<InlineKeyboardButton>> = Vec::new();
    let mut sorted_ops = operations.to_vec();
    sorted_ops.sort_by_key(|op| std::cmp::Reverse(op.id));

    for op in &sorted_ops {
        let timestamp_dt = match Utc.timestamp_opt(op.start_timestamp, 0) {
            LocalResult::Single(dt) => dt,
            _ => Utc::now(),
        };
        let date_str = timestamp_dt.format("%y-%m-%d %H:%M").to_string();
        let label = format!(
            "ID:{} {:.4} {} ({})",
            op.id, op.target_futures_qty, op.base_symbol, date_str
        );
        let callback_data_op = format!("{}{}", callback_data::PREFIX_UNHEDGE_OP_SELECT, op.id);
        buttons.push(vec![InlineKeyboardButton::callback(label, callback_data_op)]);
    }
    buttons.push(vec![InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤ –≥–ª. –º–µ–Ω—é)", callback_data::BACK_TO_MAIN)]);
    buttons.push(vec![InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", callback_data::CANCEL_DIALOG)]);
    InlineKeyboardMarkup::new(buttons)
}

/// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
fn make_unhedge_confirmation_keyboard(_operation_id: i64) -> InlineKeyboardMarkup {
    InlineKeyboardMarkup::new(vec![
        vec![
            InlineKeyboardButton::callback("‚úÖ –î–∞, —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å", format!("{}{}", callback_data::PREFIX_UNHEDGE_CONFIRM, "yes")),
            InlineKeyboardButton::callback("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data::CANCEL_DIALOG),
        ],
    ])
}

/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–û–ì–û —Å–∏–º–≤–æ–ª–∞
async fn prompt_operation_selection(
    bot: &Bot,
    chat_id: ChatId,
    symbol: &str,
    operations: Vec<HedgeOperation>,
    state_storage: StateStorage,
    message_id_to_edit: Option<MessageId>,
) -> anyhow::Result<()> {

      let text = format!(
          "–ù–∞–π–¥–µ–Ω–æ {} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è {}. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è:",
          operations.len(), symbol
      );
      let keyboard = make_unhedge_selection_keyboard(&operations);

      let bot_msg_id = if let Some(msg_id) = message_id_to_edit {
          bot.edit_message_text(chat_id, msg_id, text).reply_markup(keyboard).await?;
          msg_id
      } else {
          bot.send_message(chat_id, text).reply_markup(keyboard).await?.id
      };

      {
          let mut state_guard = state_storage.write().expect("Lock failed");
          state_guard.insert(chat_id, UserState::AwaitingUnhedgeOperationSelection {
              symbol: symbol.to_string(),
              operations,
              last_bot_message_id: Some(bot_msg_id.0),
          });
          info!("User state for {} set to AwaitingUnhedgeOperationSelection for symbol {}", chat_id, symbol);
      }
      Ok(())
}

/// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
async fn spawn_unhedge_task<E>(
    bot: Bot,
    exchange: Arc<E>,
    cfg: Arc<Config>,
    db: Arc<Db>,
    _running_operations: RunningOperations,
    chat_id: ChatId,
    op_to_unhedge: HedgeOperation,
    message_id_to_edit: MessageId,
)
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let hedger = Hedger::new((*exchange).clone(), (*cfg).clone());
    let original_op_id = op_to_unhedge.id;
    let symbol = op_to_unhedge.base_symbol.clone();
    let bot_clone = bot.clone();
    let db_clone = db.clone();

    tokio::spawn(async move {
        match hedger.run_unhedge(op_to_unhedge, db_clone.as_ref()).await {
            Ok((sold_spot_qty, bought_fut_qty)) => {
                info!("Unhedge OK for original op_id: {}", original_op_id);
                let text = format!(
                    "‚úÖ –†–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} (–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏ ID:{}) –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n\nüü¢ –°–ø–æ—Ç –ø—Ä–æ–¥–∞–Ω–æ: {:.8}\nüî¥ –§—å—é—á –∫—É–ø–ª–µ–Ω–æ: {:.8}",
                    symbol, original_op_id, sold_spot_qty, bought_fut_qty
                );
                let _ = bot_clone.edit_message_text(chat_id, message_id_to_edit, text)
                             .reply_markup(navigation::make_main_menu_keyboard())
                             .await
                             .map_err(|e| warn!("op_id:{}: Failed edit success unhedge message: {}", original_op_id, e));
            }
            Err(e) => {
                error!("Unhedge FAILED for original op_id: {}: {}", original_op_id, e);
                let error_text = format!("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ID:{}: {}", original_op_id, e);
                let _ = bot_clone.edit_message_text(chat_id, message_id_to_edit, error_text)
                             .reply_markup(navigation::make_main_menu_keyboard())
                             .await
                             .map_err(|e| warn!("op_id:{}: Failed edit error unhedge message: {}", original_op_id, e));
            }
        }
        // TODO: –£–¥–∞–ª–∏—Ç—å –∏–∑ running_operations
    });
}

/// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å –∞–∫—Ç–∏–≤ –∏–ª–∏ –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
/// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ /unhedge –±–µ–∑ —Å–∏–º–≤–æ–ª–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–µ "–†–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å"
async fn start_unhedge_asset_or_op_selection(
    bot: Bot, // <<<--- –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
    chat_id: ChatId,
    state_storage: StateStorage,
    db: Arc<Db>,
    message_id_to_edit: Option<MessageId>,
) -> anyhow::Result<()>
{
    info!("Starting unhedge flow for chat_id: {}", chat_id);
    let loading_text = "‚è≥ –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è...";
    let mut current_message_id = message_id_to_edit;

    if let Some(msg_id) = current_message_id {
        let _ = bot.edit_message_text(chat_id, msg_id, loading_text)
             .reply_markup(InlineKeyboardMarkup::new(Vec::<Vec<InlineKeyboardButton>>::new()))
             .await;
    } else {
        current_message_id = Some(bot.send_message(chat_id, loading_text).await?.id);
    }
    let bot_msg_id = current_message_id.ok_or_else(|| anyhow::anyhow!("Failed to obtain message ID for unhedge flow"))?;

    match get_all_completed_unhedged_ops(db.as_ref(), chat_id.0).await {
        Ok(all_operations) => {
            if all_operations.is_empty() {
                info!("No completed hedge operations found for chat_id: {}", chat_id);
                let text = "‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å.";
                let keyboard = InlineKeyboardMarkup::new(vec![vec![
                    InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::BACK_TO_MAIN)
                ]]);
                bot.edit_message_text(chat_id, bot_msg_id, text).reply_markup(keyboard).await?;
                { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }
                return Ok(());
            }

            let mut ops_by_symbol: HashMap<String, Vec<HedgeOperation>> = HashMap::new();
            for op in all_operations {
                ops_by_symbol.entry(op.base_symbol.clone()).or_default().push(op);
            }

            let mut available_symbols: Vec<String> = ops_by_symbol.keys().cloned().collect();
            available_symbols.sort();

            if available_symbols.len() == 1 {
                let symbol = available_symbols.first().unwrap().clone();
                let symbol_operations = ops_by_symbol.remove(&symbol).unwrap();
                info!("Found {} operations for single symbol {} for chat_id: {}", symbol_operations.len(), symbol, chat_id);

                if symbol_operations.len() == 1 {
                    let op_to_confirm = symbol_operations.into_iter().next().unwrap();
                    // prompt_unhedge_confirmation –ø—Ä–∏–Ω–∏–º–∞–µ—Ç bot –ø–æ —Å—Å—ã–ª–∫–µ, –ø–æ—ç—Ç–æ–º—É clone –Ω–µ –Ω—É–∂–µ–Ω
                    prompt_unhedge_confirmation(&bot, chat_id, op_to_confirm, state_storage, Some(bot_msg_id)).await?;
                } else {
                     // prompt_operation_selection –ø—Ä–∏–Ω–∏–º–∞–µ—Ç bot –ø–æ —Å—Å—ã–ª–∫–µ
                    prompt_operation_selection(&bot, chat_id, &symbol, symbol_operations, state_storage, Some(bot_msg_id)).await?;
                }

            } else {
                info!("Found operations for multiple symbols ({:?}) for chat_id: {}. Prompting asset selection.", available_symbols, chat_id);
                let text = "–ù–∞–π–¥–µ–Ω—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∞–∫—Ç–∏–≤–∞–º. –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è:";
                let keyboard = make_unhedge_asset_selection_keyboard(&available_symbols);
                bot.edit_message_text(chat_id, bot_msg_id, text).reply_markup(keyboard).await?;

                {
                    let mut state_guard = state_storage.write().expect("Lock failed");
                    state_guard.insert(chat_id, UserState::AwaitingUnhedgeAssetSelection {
                        last_bot_message_id: Some(bot_msg_id.0),
                    });
                    info!("User state for {} set to AwaitingUnhedgeAssetSelection", chat_id);
                }
            }
        }
        Err(e) => {
             error!("Failed query all hedge operations for chat_id {}: {}", chat_id, e);
             let error_text = format!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –ë–î: {}", e);
             let keyboard = InlineKeyboardMarkup::new(vec![vec![
                 InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::BACK_TO_MAIN)
             ]]);
             bot.edit_message_text(chat_id, bot_msg_id, error_text).reply_markup(keyboard).await?;
             { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }
             return Err(e.into());
        }
    }
    Ok(())
}


/// –ò—â–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–û–ì–û —Å–∏–º–≤–æ–ª–∞ –∏ –ª–∏–±–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω—É, –ª–∏–±–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä
/// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞ –∏–ª–∏ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /unhedge <SYMBOL>
async fn find_and_process_symbol_operations(
    bot: Bot, // <<<--- –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
    chat_id: ChatId,
    symbol: String,
    state_storage: StateStorage,
    db: Arc<Db>,
    message_id_to_edit: Option<MessageId>,
) -> anyhow::Result<()>
{
    info!("Looking for completed hedges for specific symbol {} for chat_id {}", symbol, chat_id);
    let loading_text = format!("‚è≥ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è {}...", symbol);
    let mut bot_msg_id_opt = message_id_to_edit;

    if let Some(msg_id) = bot_msg_id_opt {
         let _ = bot.edit_message_text(chat_id, msg_id, loading_text)
               .reply_markup(InlineKeyboardMarkup::new(Vec::<Vec<InlineKeyboardButton>>::new()))
               .await;
    } else {
         bot_msg_id_opt = Some(bot.send_message(chat_id, loading_text).await?.id);
    }
    let bot_msg_id = bot_msg_id_opt.ok_or_else(|| anyhow::anyhow!("Failed to get bot message ID for unhedge status"))?;

    match get_completed_unhedged_ops_for_symbol(db.as_ref(), chat_id.0, &symbol).await {
        Ok(operations) => {
            if operations.is_empty() {
                let text = format!("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {}, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å.", symbol);
                 let keyboard = InlineKeyboardMarkup::new(vec![vec![
                     InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ (–≤ –≥–ª. –º–µ–Ω—é)", callback_data::BACK_TO_MAIN)
                 ]]);
                bot.edit_message_text(chat_id, bot_msg_id, text).reply_markup(keyboard).await?;
                { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }
            } else if operations.len() == 1 {
                 let op_to_unhedge = operations.into_iter().next().unwrap();
                 // prompt_unhedge_confirmation –ø—Ä–∏–Ω–∏–º–∞–µ—Ç bot –ø–æ —Å—Å—ã–ª–∫–µ
                 prompt_unhedge_confirmation(&bot, chat_id, op_to_unhedge, state_storage, Some(bot_msg_id)).await?;
            } else {
                 // prompt_operation_selection –ø—Ä–∏–Ω–∏–º–∞–µ—Ç bot –ø–æ —Å—Å—ã–ª–∫–µ
                 prompt_operation_selection(&bot, chat_id, &symbol, operations, state_storage, Some(bot_msg_id)).await?;
            }
        }
        Err(e) => {
            error!("Failed to query hedge operations for {}: {}", symbol, e);
            let error_text = format!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î: {}", e);
            let keyboard = InlineKeyboardMarkup::new(vec![vec![
                InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::BACK_TO_MAIN)
            ]]);
            bot.edit_message_text(chat_id, bot_msg_id, error_text).reply_markup(keyboard).await?;
            { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }
            return Err(e.into());
        }
    }
    Ok(())
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤ ---

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unhedge [SYMBOL]
pub async fn handle_unhedge_command<E>(
    bot: Bot,
    msg: Message,
    symbol_arg: String,
    _exchange: Arc<E>,
    state_storage: StateStorage,
    _running_operations: RunningOperations,
    _cfg: Arc<Config>,
    db: Arc<Db>,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    let symbol = symbol_arg.trim().to_uppercase();

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
    let mut previous_bot_message_id: Option<i32> = None;
      {
         let mut state_guard = state_storage.write().expect("Lock failed");
         if let Some(old_state) = state_guard.get(&chat_id) {
              previous_bot_message_id = match old_state {
                   UserState::AwaitingUnhedgeAssetSelection { last_bot_message_id, .. } => *last_bot_message_id,
                   UserState::AwaitingUnhedgeOperationSelection { last_bot_message_id, .. } => *last_bot_message_id,
                   UserState::AwaitingUnhedgeConfirmation { last_bot_message_id, .. } => *last_bot_message_id,
                   _ => None,
              };
         }
         if !matches!(state_guard.get(&chat_id), Some(UserState::None) | None) {
             info!("Resetting state for {} due to /unhedge command", chat_id);
             state_guard.insert(chat_id, UserState::None);
         }
    }
    if let Some(bot_msg_id) = previous_bot_message_id {
        if let Err(e) = bot.delete_message(chat_id, MessageId(bot_msg_id)).await { warn!("Failed delete prev bot msg: {}", e); }
    }
    let user_msg_id = msg.id;
    if let Err(e) = bot.delete_message(chat_id, user_msg_id).await { warn!("Failed delete user command msg: {}", e); }


    if symbol.is_empty() {
        info!("Processing /unhedge command without symbol for chat_id: {}", chat_id);
        // bot –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è —Å—é–¥–∞
        start_unhedge_asset_or_op_selection(bot, chat_id, state_storage, db, None).await?;
    } else {
        info!("Processing /unhedge command for chat_id: {}, symbol: {}", chat_id, symbol);
         // bot –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è —Å—é–¥–∞
        find_and_process_symbol_operations(bot, chat_id, symbol, state_storage, db, None).await?;
    }

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
pub async fn handle_start_unhedge_callback<E>(
    bot: Bot,
    query: CallbackQuery,
    _exchange: Arc<E>,
    state_storage: StateStorage,
    _cfg: Arc<Config>,
    db: Arc<Db>,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
      // <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ –î–û –≤—ã–∑–æ–≤–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ >>>
      if let Some(msg) = query.message.as_ref() {
          let chat_id = msg.chat().id;
          info!("Processing '{}' callback for chat_id: {}", callback_data::START_UNHEDGE, chat_id);
          bot.answer_callback_query(query.id).await?; // –û—Ç–≤–µ—á–∞–µ–º –∑–¥–µ—Å—å
           // bot –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è —Å—é–¥–∞
          start_unhedge_asset_or_op_selection(bot, chat_id, state_storage, db, Some(msg.id())).await?;
      } else {
          warn!("CallbackQuery missing message in handle_start_unhedge_callback");
          bot.answer_callback_query(query.id).await?; // –í—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º
      }
    // –û—Ç–≤–µ—Ç —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞ –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∞ (–ø—Ä–µ—Ñ–∏–∫—Å u_asset_)
pub async fn handle_unhedge_asset_callback<E>(
    bot: Bot,
    query: CallbackQuery,
    _exchange: Arc<E>,
    state_storage: StateStorage,
    _cfg: Arc<Config>,
    db: Arc<Db>,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let query_id = query.id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    if let (Some(data), Some(msg)) = (query.data.as_deref(), query.message.as_ref()) {
        let chat_id = msg.chat().id;
        if let Some(symbol) = data.strip_prefix(callback_data::PREFIX_UNHEDGE_ASSET) {
             info!("User {} selected asset {} for unhedge via callback", chat_id, symbol);

            let is_correct_state = {
                 let state_read_guard = state_storage.read().expect("Lock failed");
                 matches!(state_read_guard.get(&chat_id), Some(UserState::AwaitingUnhedgeAssetSelection { .. }))
            };

            if is_correct_state {
                 bot.answer_callback_query(query_id).await?; // <<< –û—Ç–≤–µ—á–∞–µ–º –î–û –≤—ã–∑–æ–≤–∞ >>>
                  // bot –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è —Å—é–¥–∞
                 find_and_process_symbol_operations(bot, chat_id, symbol.to_string(), state_storage, db, Some(msg.id())).await?;
                 return Ok(()); // –í—ã—Ö–æ–¥–∏–º, —Ç.–∫. –æ—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            } else {
                 warn!("User {} clicked unhedge asset button but was in wrong state", chat_id);
                  { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }
                  let _ = navigation::show_main_menu(&bot, chat_id, Some(msg.id())).await;
                  bot.answer_callback_query(query_id).text("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.").show_alert(true).await?;
                  return Ok(()); // –í—ã—Ö–æ–¥–∏–º, —Ç.–∫. –æ—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            }

        } else {
             warn!("Invalid callback data format for unhedge asset selection: {}", data);
        }
    } else {
         warn!("CallbackQuery missing data or message in handle_unhedge_asset_callback");
    }
      bot.answer_callback_query(query_id).await?; // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –Ω–µ –≤—ã—à–ª–∏ —Ä–∞–Ω—å—à–µ
      Ok(())
}


/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∞ (–ø—Ä–µ—Ñ–∏–∫—Å u_opsel_)
pub async fn handle_unhedge_select_op_callback<E>(
    bot: Bot, // <<< –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é, —Ç.–∫. –º–æ–∂–µ–º –ø–µ—Ä–µ–¥–∞—Ç—å –≤ show_main_menu
    query: CallbackQuery,
    _exchange: Arc<E>,
    state_storage: StateStorage,
    _running_operations: RunningOperations,
    _cfg: Arc<Config>,
    _db: Arc<Db>,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let query_id = query.id;
    if let (Some(data), Some(msg)) = (query.data.as_deref(), query.message.as_ref()) {
        let chat_id = msg.chat().id;
        if let Some(op_id_str) = data.strip_prefix(callback_data::PREFIX_UNHEDGE_OP_SELECT) {
            if let Ok(operation_id) = op_id_str.parse::<i64>() {
                 info!("User {} selected operation ID {} to unhedge", chat_id, operation_id);

                let op_to_confirm_opt: Option<HedgeOperation> = {
                    let state_guard = state_storage.read().expect("Lock failed");
                    if let Some(UserState::AwaitingUnhedgeOperationSelection { operations, .. }) = state_guard.get(&chat_id) {
                        operations.iter().find(|op| op.id == operation_id).cloned()
                    } else {
                        warn!("User {} clicked unhedge operation selection but was in wrong state", chat_id);
                        drop(state_guard);
                         { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }
                        // bot –ü–ï–†–ï–ú–ï–©–ê–ï–¢–°–Ø —Å—é–¥–∞
                        let _ = navigation::show_main_menu(&bot, chat_id, Some(msg.id())).await;
                        bot.answer_callback_query(query_id).text("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.").show_alert(true).await?;
                        return Ok(());
                    }
                };

                if let Some(op) = op_to_confirm_opt {
                    // prompt_unhedge_confirmation –ø—Ä–∏–Ω–∏–º–∞–µ—Ç bot –ø–æ —Å—Å—ã–ª–∫–µ (&Bot)
                    prompt_unhedge_confirmation(&bot, chat_id, op, state_storage, Some(msg.id())).await?;
                    bot.answer_callback_query(query_id).await?;
                    return Ok(());
                } else {
                    error!("Operation ID {} not found in state for chat_id {}", operation_id, chat_id);
                    { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }
                     // bot –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è, —Ç.–∫. edit_message_text –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ
                    let _ = bot.edit_message_text(chat_id, msg.id(), "‚ùå –û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                             .reply_markup(navigation::make_main_menu_keyboard())
                             .await;
                    bot.answer_callback_query(query_id).await?;
                    return Ok(());
                }

            } else {
                 error!("Failed to parse operation_id from callback data: {}", data);
                 // bot –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è
                 let _ = bot.edit_message_text(chat_id, msg.id(), "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫–Ω–æ–ø–∫–µ.")
                          .reply_markup(navigation::make_main_menu_keyboard())
                          .await;
                   { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }
                 bot.answer_callback_query(query_id).await?;
                 return Ok(());
            }
        } else {
             warn!("Invalid callback data format for unhedge operation selection: {}", data);
        }
    } else {
         warn!("CallbackQuery missing data or message in handle_unhedge_select_op_callback");
    }
    bot.answer_callback_query(query_id).await?;
    Ok(())
}

/// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async fn prompt_unhedge_confirmation(
    bot: &Bot, // <<< –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ
    chat_id: ChatId,
    operation_to_unhedge: HedgeOperation,
    state_storage: StateStorage,
    message_id_to_edit: Option<MessageId>,
) -> anyhow::Result<()> {
    let operation_id = operation_to_unhedge.id;
    let symbol = operation_to_unhedge.base_symbol.clone();
    let fut_qty = operation_to_unhedge.target_futures_qty;
    let spot_sell_qty_approx = operation_to_unhedge.spot_filled_qty;

    let text = format!(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ID:{}\n\
         –°–∏–º–≤–æ–ª: {}\n\
         –ë—É–¥–µ—Ç –ø—Ä–æ–¥–∞–Ω–æ ~{:.8} {} —Å–ø–æ—Ç–∞.\n\
         –ë—É–¥–µ—Ç –∫—É–ø–ª–µ–Ω–æ {:.8} {} —Ñ—å—é—á–µ—Ä—Å–∞.\n\n\
         –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        operation_id, symbol, spot_sell_qty_approx, symbol, fut_qty, symbol
    );
    let keyboard = make_unhedge_confirmation_keyboard(operation_id);

    let bot_msg_id = if let Some(msg_id) = message_id_to_edit {
        bot.edit_message_text(chat_id, msg_id, text).reply_markup(keyboard).await?;
        msg_id
    } else {
        bot.send_message(chat_id, text).reply_markup(keyboard).await?.id
    };

    {
        let mut state_guard = state_storage.write().expect("Lock failed");
        state_guard.insert(chat_id, UserState::AwaitingUnhedgeConfirmation {
            operation_id,
            last_bot_message_id: Some(bot_msg_id.0),
        });
        info!("User state for {} set to AwaitingUnhedgeConfirmation for op_id {}", chat_id, operation_id);
    }
    Ok(())
}


/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Ö–µ–¥–∂–∞ (–ø—Ä–µ—Ñ–∏–∫—Å u_conf_)
pub async fn handle_unhedge_confirm_callback<E>(
    bot: Bot,
    query: CallbackQuery,
    exchange: Arc<E>,
    state_storage: StateStorage,
    running_operations: RunningOperations,
    cfg: Arc<Config>,
    db: Arc<Db>,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let query_id = query.id.clone(); // <<< –ö–ª–æ–Ω–∏—Ä—É–µ–º ID, –µ—Å–ª–∏ –æ–Ω String

    if let (Some(data), Some(msg)) = (query.data.as_deref(), query.message.as_ref()) {
        let chat_id = msg.chat().id;
        if let Some(payload) = data.strip_prefix(callback_data::PREFIX_UNHEDGE_CONFIRM) {
            if payload == "yes" {
                info!("User {} confirmed unhedge operation", chat_id);

                let operation_id_to_unhedge = {
                     let state_guard = state_storage.read().expect("Lock failed");
                      match state_guard.get(&chat_id) {
                         Some(UserState::AwaitingUnhedgeConfirmation { operation_id, .. }) => *operation_id,
                         _ => {
                             warn!("User {} confirmed unhedge but was in wrong state", chat_id);
                             drop(state_guard);
                              { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }
                             // bot –ü–ï–†–ï–ú–ï–©–ê–ï–¢–°–Ø —Å—é–¥–∞
                             let _ = navigation::show_main_menu(&bot, chat_id, Some(msg.id())).await;
                              bot.answer_callback_query(query_id).text("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.").show_alert(true).await?;
                             return Ok(());
                         }
                     }
                };
                 { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }

                match get_hedge_operation_by_id(db.as_ref(), operation_id_to_unhedge).await {
                     Ok(Some(original_op)) => {
                         if original_op.status != "Completed" || original_op.unhedged_op_id.is_some() {
                             error!("Attempted to unhedge already unhedged or invalid op_id: {}", operation_id_to_unhedge);
                             // bot –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è
                             let _ = bot.edit_message_text(chat_id, msg.id(), "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
                                      .reply_markup(navigation::make_main_menu_keyboard())
                                      .await;
                             bot.answer_callback_query(query_id).await?;
                             return Ok(());
                         } else {
                             // bot –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è
                             let _ = bot.edit_message_text(chat_id, msg.id(), format!("‚è≥ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ID:{}...", operation_id_to_unhedge))
                                .reply_markup(InlineKeyboardMarkup::new(Vec::<Vec<InlineKeyboardButton>>::new()))
                                .await?;
                             // bot –ö–õ–û–ù–ò–†–£–ï–¢–°–Ø –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –∑–∞–¥–∞—á—É
                             spawn_unhedge_task(
                                 bot.clone(), exchange.clone(), cfg.clone(), db.clone(),
                                 running_operations.clone(), chat_id, original_op, msg.id(),
                             ).await;
                              // –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –∑–¥–µ—Å—å –Ω–∞ query_id
                         }
                     }
                     Ok(None) => {
                         error!("Hedge operation ID {} not found in DB for unhedge confirmation", operation_id_to_unhedge);
                         // bot –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è
                         let _ = bot.edit_message_text(chat_id, msg.id(), "‚ùå –û—à–∏–±–∫–∞: –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.")
                                  .reply_markup(navigation::make_main_menu_keyboard())
                                  .await;
                         bot.answer_callback_query(query_id).await?;
                         return Ok(());
                     }
                     Err(e) => {
                          error!("DB error getting hedge operation {} for unhedge: {}", operation_id_to_unhedge, e);
                          // bot –Ω–µ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è
                          let _ = bot.edit_message_text(chat_id, msg.id(), "‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
                                   .reply_markup(navigation::make_main_menu_keyboard())
                                   .await;
                         bot.answer_callback_query(query_id).await?;
                         return Ok(());
                     }
                }
                // –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ query_id –∑–¥–µ—Å—å, –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∑–∞–¥–∞—á—É

            } else if payload == "no" {
                // <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–≤–µ—á–∞–µ–º –î–û –≤—ã–∑–æ–≤–∞ handle_cancel_dialog >>>
                info!("User {} cancelled unhedge at confirmation", chat_id);
                bot.answer_callback_query(query_id).await?; // –û—Ç–≤–µ—á–∞–µ–º –∑–¥–µ—Å—å
                // –ü–†–ï–î–ü–û–õ–û–ñ–ï–ù–ò–ï: handle_cancel_dialog –ø—Ä–∏–Ω–∏–º–∞–µ—Ç (Bot, ChatId, MessageId, StateStorage)
                // bot –ü–ï–†–ï–ú–ï–©–ê–ï–¢–°–Ø —Å—é–¥–∞
                navigation::handle_cancel_dialog(bot, chat_id, msg.id(), state_storage).await?;
                return Ok(());

            } else {
                 warn!("Invalid payload for unhedge confirmation callback: {}", payload);
                 bot.answer_callback_query(query_id).await?;
                 return Ok(());
            }
        } else if data == callback_data::CANCEL_DIALOG {
             // <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–≤–µ—á–∞–µ–º –î–û –≤—ã–∑–æ–≤–∞ handle_cancel_dialog >>>
            info!("User cancelled unhedge dialog via cancel button");
            bot.answer_callback_query(query_id).await?; // –û—Ç–≤–µ—á–∞–µ–º –∑–¥–µ—Å—å
            // –ü–†–ï–î–ü–û–õ–û–ñ–ï–ù–ò–ï: handle_cancel_dialog –ø—Ä–∏–Ω–∏–º–∞–µ—Ç (Bot, ChatId, MessageId, StateStorage)
             // bot –ü–ï–†–ï–ú–ï–©–ê–ï–¢–°–Ø —Å—é–¥–∞
            navigation::handle_cancel_dialog(bot, chat_id, msg.id(), state_storage).await?;
            return Ok(());
        }
         else {
             warn!("Invalid callback data format for unhedge confirmation: {}", data);
             bot.answer_callback_query(query_id).await?;
             return Ok(());
        }
    } else {
         warn!("CallbackQuery missing data or message in handle_unhedge_confirm_callback");
         bot.answer_callback_query(query_id).await?;
         return Ok(());
    }
     // –°—é–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –¥–æ—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ –≤—Å–µ –≤–µ—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
    Ok(())
}