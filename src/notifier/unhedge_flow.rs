// src/notifier/unhedge_flow.rs

use super::{
    Command, StateStorage, UserState, RunningOperations, RunningOperationInfo, OperationType, callback_data, // –ò–º–ø–æ—Ä—Ç –æ–±—â–∏—Ö —Ç–∏–ø–æ–≤
    navigation, // –î–ª—è –∫–Ω–æ–ø–æ–∫ –ù–∞–∑–∞–¥/–û—Ç–º–µ–Ω–∞
    wallet_info, // –ú–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–∫—Ç–∏–≤–∞
    progress, // –î–ª—è –∫–æ–ª–±—ç–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–µ—Å–ª–∏ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–ª—è unhedge)
    utils,    // –î–ª—è –æ–±—â–∏—Ö —É—Ç–∏–ª–∏—Ç
};
use crate::config::Config;
use crate::exchange::Exchange;
use crate::storage::{Db, HedgeOperation, get_completed_unhedged_ops_for_symbol, mark_hedge_as_unhedged}; // –§—É–Ω–∫—Ü–∏–∏ –∏–∑ storage
use crate::hedger::{Hedger, ORDER_FILL_TOLERANCE}; // Hedger –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
use std::sync::Arc;
use std::time::Duration; // –î–ª—è sleep
use chrono::{Utc, TimeZone, LocalResult}; // –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
use tokio::sync::Mutex as TokioMutex;
use teloxide::prelude::*;
use teloxide::types::{
    InlineKeyboardButton, InlineKeyboardMarkup, Message, MessageId, CallbackQuery, ChatId, ParseMode,
};
use teloxide::utils::command::BotCommands;
use tracing::{info, warn, error};


// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

/// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
fn make_unhedge_selection_keyboard(operations: &[HedgeOperation]) -> InlineKeyboardMarkup {
    let mut buttons: Vec<Vec<InlineKeyboardButton>> = Vec::new();
    let mut sorted_ops = operations.to_vec(); // –ö–ª–æ–Ω–∏—Ä—É–µ–º –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sorted_ops.sort_by_key(|op| std::cmp::Reverse(op.id)); // –°–æ—Ä—Ç–∏—Ä—É–µ–º (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)

    for op in &sorted_ops {
        let timestamp_dt = match Utc.timestamp_opt(op.start_timestamp, 0) {
            LocalResult::Single(dt) => dt,
            _ => Utc::now(), // Fallback
        };
        let date_str = timestamp_dt.format("%y-%m-%d %H:%M").to_string(); // –ö—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º target_futures_qty (–Ω–µ—Ç—Ç–æ)
        let label = format!(
            "ID:{} {:.4} {} ({})", // –ú–µ–Ω—å—à–µ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            op.id, op.target_futures_qty, op.base_symbol, date_str
        );
        let callback_data = format!("{}{}", callback_data::PREFIX_UNHEDGE_OP_SELECT, op.id);
        buttons.push(vec![InlineKeyboardButton::callback(label, callback_data)]);
    }
    buttons.push(vec![InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::BACK_TO_MAIN)]); // –ò–ª–∏ –Ω–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∞–∫—Ç–∏–≤–∞? –ü–æ–∫–∞ –≤ –º–µ–Ω—é.
    buttons.push(vec![InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", callback_data::CANCEL_DIALOG)]);
    InlineKeyboardMarkup::new(buttons)
}

/// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
fn make_unhedge_confirmation_keyboard(operation_id: i64) -> InlineKeyboardMarkup {
    InlineKeyboardMarkup::new(vec![
        vec![
            InlineKeyboardButton::callback("‚úÖ –î–∞, —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å", format!("{}{}", callback_data::PREFIX_UNHEDGE_CONFIRM, "yes")),
            InlineKeyboardButton::callback("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data::CANCEL_DIALOG),
        ],
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        // vec![InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::???)]
    ])
}


/// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
async fn prompt_operation_selection(
    bot: &Bot,
    chat_id: ChatId,
    symbol: &str,
    operations: Vec<HedgeOperation>, // –ù–µ &Vec, —Ç.–∫. –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    state_storage: StateStorage,
    message_id_to_edit: Option<MessageId>,
) -> anyhow::Result<()> {

     let text = format!(
         "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ ({}) –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {}. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è:",
         operations.len(), symbol
     );
     let kb = make_unhedge_selection_keyboard(&operations);

     let bot_msg_id = if let Some(msg_id) = message_id_to_edit {
         bot.edit_message_text(chat_id, msg_id, text).reply_markup(kb).await?;
         msg_id
     } else {
         bot.send_message(chat_id, text).reply_markup(kb).await?.id
     };

     // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
     {
         let mut state_guard = state_storage.write().expect("Lock failed");
         state_guard.insert(chat_id, UserState::AwaitingUnhedgeOperationSelection {
             symbol: symbol.to_string(),
             operations, // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤–µ–∫—Ç–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
             last_bot_message_id: Some(bot_msg_id.0),
         });
         info!("User state for {} set to AwaitingUnhedgeOperationSelection for symbol {}", chat_id, symbol);
     }
     Ok(())
}


/// –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
async fn spawn_unhedge_task<E>(
    bot: Bot,
    exchange: Arc<E>,
    cfg: Arc<Config>,
    db: Arc<Db>,
    running_operations: RunningOperations, // –î–æ–±–∞–≤–∏–ª–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    chat_id: ChatId,
    op_to_unhedge: HedgeOperation, // –ò—Å—Ö–æ–¥–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —Ö–µ–¥–∂–∞
    message_id_to_edit: MessageId, // –°–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–ø—É—Å–∫–∞—é..." –∏–ª–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
)
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let hedger = Hedger::new((*exchange).clone(), (*cfg).clone());
    let original_op_id = op_to_unhedge.id;
    let symbol = op_to_unhedge.base_symbol.clone();
    let bot_clone = bot.clone(); // –ö–ª–æ–Ω–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∑–∞–¥–∞—á–µ

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
    // let task_handle = ...;
    // let info = RunningOperationInfo { ... type: Unhedge ... };
    // running_operations.lock().await.insert((chat_id, original_op_id), info); // –ù—É–∂–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è unhedge?
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º

    tokio::spawn(async move {
        match hedger.run_unhedge(op_to_unhedge, db.as_ref()).await {
            Ok((sold_spot_qty, bought_fut_qty)) => {
                info!("Unhedge OK for original op_id: {}", original_op_id);
                let text = format!(
                    "‚úÖ –†–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} (–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏ ID:{}) –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n\nüü¢ –°–ø–æ—Ç –ø—Ä–æ–¥–∞–Ω–æ: {:.8}\nüî¥ –§—å—é—á –∫—É–ø–ª–µ–Ω–æ: {:.8}",
                    symbol, original_op_id, sold_spot_qty, bought_fut_qty
                );
                // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                let _ = bot_clone.edit_message_text(chat_id, message_id_to_edit, text)
                           .reply_markup(navigation::make_main_menu_keyboard())
                           .await
                           .map_err(|e| warn!("op_id:{}: Failed edit success unhedge message: {}", original_op_id, e));
            }
            Err(e) => {
                error!("Unhedge FAILED for original op_id: {}: {}", original_op_id, e);
                // –°—Ç–∞—Ç—É—Å –∏—Å—Ö–æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –ë–î –Ω–µ –º–µ–Ω—è–µ–º (–æ–Ω–∞ –æ—Å—Ç–∞–µ—Ç—Å—è Completed),
                // –Ω–æ —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                let error_text = format!("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ID:{}: {}", original_op_id, e);
                let _ = bot_clone.edit_message_text(chat_id, message_id_to_edit, error_text)
                           .reply_markup(navigation::make_main_menu_keyboard())
                           .await
                           .map_err(|e| warn!("op_id:{}: Failed edit error unhedge message: {}", original_op_id, e));
            }
        }
        // TODO: –£–¥–∞–ª–∏—Ç—å –∏–∑ running_operations –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        // running_operations.lock().await.remove(&(chat_id, original_op_id));
    });
}


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–æ–ª–±—ç–∫–æ–≤ ---

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unhedge [SYMBOL]
pub async fn handle_unhedge_command<E>(
    bot: Bot,
    msg: Message,
    symbol_arg: String, // –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π
    exchange: Arc<E>,
    state_storage: StateStorage,
    running_operations: RunningOperations, // TODO: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤?
    cfg: Arc<Config>,
    db: Arc<Db>,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    let symbol = symbol_arg.trim().to_uppercase();

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ /hedge)
    // TODO: –í—ã–Ω–µ—Å—Ç–∏ –≤ —É—Ç–∏–ª–∏—Ç—É
    let mut previous_bot_message_id: Option<i32> = None;
     {
        let mut state_guard = state_storage.write().expect("Lock failed");
        if let Some(old_state) = state_guard.get(&chat_id) {
             previous_bot_message_id = match old_state {
                 UserState::AwaitingUnhedgeAssetSelection { last_bot_message_id, .. } => *last_bot_message_id,
                 UserState::AwaitingUnhedgeOperationSelection { last_bot_message_id, .. } => *last_bot_message_id,
                 UserState::AwaitingUnhedgeConfirmation { last_bot_message_id, .. } => *last_bot_message_id,
                 // ... –¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ...
                 _ => None,
             };
        }
        if !matches!(state_guard.get(&chat_id), Some(UserState::None) | None) {
            info!("Resetting state for {} due to /unhedge command", chat_id);
            state_guard.insert(chat_id, UserState::None);
        }
    }
    if let Some(bot_msg_id) = previous_bot_message_id {
        if let Err(e) = bot.delete_message(chat_id, MessageId(bot_msg_id)).await { warn!("Failed delete prev bot msg: {}", e); }
    }
    let user_msg_id = msg.id;
    if let Err(e) = bot.delete_message(chat_id, user_msg_id).await { warn!("Failed delete user command msg: {}", e); }


    if symbol.is_empty() {
        // –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞
        info!("Processing /unhedge command without symbol for chat_id: {}", chat_id);
        prompt_unhedge_asset_selection(bot, chat_id, state_storage, exchange, cfg, db, None).await?;
    } else {
        // –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª —É–∫–∞–∑–∞–Ω, –∏—â–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–≥–æ
        info!("Processing /unhedge command for chat_id: {}, symbol: {}", chat_id, symbol);
        find_and_process_unhedge_operations(bot, chat_id, symbol, state_storage, exchange, cfg, db, running_operations, None).await?;
    }

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
pub async fn handle_start_unhedge_callback<E>(
    bot: Bot,
    q: CallbackQuery,
    exchange: Arc<E>,
    state_storage: StateStorage,
    cfg: Arc<Config>,
    db: Arc<Db>,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
     if let Some(msg) = q.message {
        let chat_id = msg.chat.id;
        info!("Processing '{}' callback for chat_id: {}", callback_data::START_UNHEDGE, chat_id);
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        prompt_unhedge_asset_selection(bot, chat_id, state_storage, exchange, cfg, db, Some(msg.id)).await?;
    } else {
        warn!("CallbackQuery missing message in handle_start_unhedge_callback");
    }
    bot.answer_callback_query(q.id).await?;
    Ok(())
}


/// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞ –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ)
async fn prompt_unhedge_asset_selection<E>(
    bot: Bot,
    chat_id: ChatId,
    state_storage: StateStorage,
    exchange: Arc<E>,
    cfg: Arc<Config>,
    db: Arc<Db>,
    message_id_to_edit: Option<MessageId>,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    info!("Prompting asset selection for unhedge, chat_id: {}", chat_id);
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –ï–°–¢–¨ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ö–µ–¥–∂–∏
    // 1. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ HedgeOperation —Å status='Completed' –∏ unhedged_op_id IS NULL –¥–ª—è chat_id
    // 2. –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –ø–æ base_symbol
    // 3. –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –æ–¥–∏–Ω - —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ prompt_operation_selection
    // 4. –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å —ç—Ç–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏

    // --- –ó–∞–≥–ª—É—à–∫–∞ ---
    warn!("Asset selection for unhedge is not fully implemented yet. Proceeding as if BTC was selected.");
    let symbol = "BTC".to_string(); // –ü—Ä–∏–º–µ—Ä
    find_and_process_unhedge_operations(
        bot, chat_id, symbol, state_storage, exchange, cfg, db,
        Arc::new(TokioMutex::new(Default::default())), // –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π RunningOperations
        message_id_to_edit
    ).await?;
    // --- –ö–æ–Ω–µ—Ü –ó–∞–≥–ª—É—à–∫–∏ ---

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞ –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∞ (–ø—Ä–µ—Ñ–∏–∫—Å u_asset_)
pub async fn handle_unhedge_asset_callback<E>(
    bot: Bot,
    q: CallbackQuery,
    exchange: Arc<E>,
    state_storage: StateStorage,
    cfg: Arc<Config>,
    db: Arc<Db>,
    // running_operations: RunningOperations, // –ù–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å, –Ω—É–∂–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    if let (Some(data), Some(msg)) = (q.data, q.message) {
        let chat_id = msg.chat.id;
        if let Some(symbol) = data.strip_prefix(callback_data::PREFIX_UNHEDGE_ASSET) {
             info!("User {} selected asset {} for unhedge via callback", chat_id, symbol);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
             let is_correct_state = matches!(
                 state_storage.read().expect("Lock failed").get(&chat_id),
                 Some(UserState::AwaitingUnhedgeAssetSelection { .. })
             );

             if is_correct_state {
                 // –ò—â–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                 find_and_process_unhedge_operations(
                     bot, chat_id, symbol.to_string(), state_storage, exchange, cfg, db,
                     Arc::new(TokioMutex::new(Default::default())), // –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π RunningOperations
                     Some(msg.id)
                 ).await?;
             } else {
                 warn!("User {} clicked unhedge asset button but was in wrong state", chat_id);
                  { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }
                  let _ = navigation::show_main_menu(&bot, chat_id, Some(msg.id)).await;
                  bot.answer_callback_query(q.id).text("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.").show_alert(true).await?;
                  return Ok(());
             }

        } else {
             warn!("Invalid callback data format for unhedge asset selection: {}", data);
        }
    } else {
         warn!("CallbackQuery missing data or message in handle_unhedge_asset_callback");
    }
     bot.answer_callback_query(q.id).await?;
     Ok(())
}


/// –ò—â–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ –∏ –ª–∏–±–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω—É, –ª–∏–±–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä
async fn find_and_process_unhedge_operations<E>(
    bot: Bot,
    chat_id: ChatId,
    symbol: String,
    state_storage: StateStorage,
    exchange: Arc<E>,
    cfg: Arc<Config>,
    db: Arc<Db>,
    running_operations: RunningOperations,
    message_id_to_edit: Option<MessageId>,
) -> anyhow::Result<()>
where
     E: Exchange + Clone + Send + Sync + 'static,
{
    info!("Looking for completed hedges for symbol {} for chat_id {}", symbol, chat_id);
    let loading_text = format!("‚è≥ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è {}...", symbol);
    let mut bot_msg_id_opt = message_id_to_edit;

    if let Some(msg_id) = bot_msg_id_opt {
         let _ = bot.edit_message_text(chat_id, msg_id, loading_text).await;
    } else {
         bot_msg_id_opt = Some(bot.send_message(chat_id, loading_text).await?.id);
    }
    let bot_msg_id = bot_msg_id_opt.ok_or_else(|| anyhow::anyhow!("Failed to get bot message ID for unhedge status"))?;

    match get_completed_unhedged_ops_for_symbol(db.as_ref(), chat_id.0, &symbol).await {
        Ok(operations) => {
            if operations.is_empty() {
                let text = format!("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {}, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å.", symbol);
                 let kb = InlineKeyboardMarkup::new(vec![vec![
                     InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::BACK_TO_MAIN)
                 ]]);
                bot.edit_message_text(chat_id, bot_msg_id, text).reply_markup(kb).await?;
                { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); } // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            } else if operations.len() == 1 {
                 // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
                 let op_to_unhedge = operations.into_iter().next().unwrap(); // –ë–µ–∑–æ–ø–∞—Å–Ω–æ
                 prompt_unhedge_confirmation(bot, chat_id, op_to_unhedge, state_storage, Some(bot_msg_id)).await?;
            } else {
                 // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
                 prompt_operation_selection(bot, chat_id, &symbol, operations, state_storage, Some(bot_msg_id)).await?;
            }
        }
        Err(e) => {
            error!("Failed to query hedge operations for {}: {}", symbol, e);
            let error_text = format!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î: {}", e);
            let kb = InlineKeyboardMarkup::new(vec![vec![
                InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::BACK_TO_MAIN)
            ]]);
            bot.edit_message_text(chat_id, bot_msg_id, error_text).reply_markup(kb).await?;
            { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); } // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
            return Err(e.into()); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        }
    }
    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Ö–µ–¥–∂–∞ (–ø—Ä–µ—Ñ–∏–∫—Å u_opsel_)
pub async fn handle_unhedge_select_op_callback<E>(
    bot: Bot,
    q: CallbackQuery,
    _exchange: Arc<E>, // –ù–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å
    state_storage: StateStorage,
    _running_operations: RunningOperations, // –ù–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å
    _cfg: Arc<Config>, // –ù–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å
    _db: Arc<Db>, // –ù–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    if let (Some(data), Some(msg)) = (q.data, q.message) {
        let chat_id = msg.chat.id;
        if let Some(op_id_str) = data.strip_prefix(callback_data::PREFIX_UNHEDGE_OP_SELECT) {
            if let Ok(operation_id) = op_id_str.parse::<i64>() {
                 info!("User {} selected operation ID {} to unhedge", chat_id, operation_id);

                 // –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                 let mut operation_to_confirm: Option<HedgeOperation> = None;
                 { // –ë–ª–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
                     let state_guard = state_storage.read().expect("Lock failed");
                     if let Some(UserState::AwaitingUnhedgeOperationSelection { operations, .. }) = state_guard.get(&chat_id) {
                         // –ò—â–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é –≤ —Å–ø–∏—Å–∫–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                         operation_to_confirm = operations.iter().find(|op| op.id == operation_id).cloned();
                     } else {
                         warn!("User {} clicked unhedge operation selection but was in wrong state", chat_id);
                         { drop(state_guard); state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }
                         let _ = navigation::show_main_menu(&bot, chat_id, Some(msg.id)).await;
                         bot.answer_callback_query(q.id).text("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.").show_alert(true).await?;
                         return Ok(());
                     }
                 } // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á—Ç–µ–Ω–∏—è —Å–Ω—è—Ç–∞

                 if let Some(op) = operation_to_confirm {
                     // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                     prompt_unhedge_confirmation(bot, chat_id, op, state_storage, Some(msg.id)).await?;
                 } else {
                     error!("Operation ID {} not found in state for chat_id {}", operation_id, chat_id);
                     // –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ
                      { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }
                      let _ = bot.edit_message_text(chat_id, msg.id, "‚ùå –û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                                 .reply_markup(navigation::make_main_menu_keyboard())
                                 .await;
                 }

            } else {
                 error!("Failed to parse operation_id from callback data: {}", data);
                  let _ = bot.edit_message_text(chat_id, msg.id, "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫–Ω–æ–ø–∫–µ.")
                             .reply_markup(navigation::make_main_menu_keyboard())
                             .await;
                   { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }
            }
        } else {
            warn!("Invalid callback data format for unhedge operation selection: {}", data);
        }
    } else {
         warn!("CallbackQuery missing data or message in handle_unhedge_select_op_callback");
    }
    bot.answer_callback_query(q.id).await?;
    Ok(())
}


/// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ–º
async fn prompt_unhedge_confirmation(
    bot: Bot,
    chat_id: ChatId,
    operation_to_unhedge: HedgeOperation, // –ù–µ &HedgeOperation, —Ç.–∫. ID –Ω—É–∂–µ–Ω –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_storage: StateStorage,
    message_id_to_edit: Option<MessageId>,
) -> anyhow::Result<()> {
    let operation_id = operation_to_unhedge.id;
    let symbol = operation_to_unhedge.base_symbol;
    let fut_qty = operation_to_unhedge.target_futures_qty; // –ù–µ—Ç—Ç–æ —Ñ—å—é—á–µ—Ä—Å–∞

    // TODO: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —Å–ø–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–∞–Ω–æ
    let spot_sell_qty_approx = operation_to_unhedge.spot_filled_qty; // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ

    let text = format!(
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ID:{}\n\
        –°–∏–º–≤–æ–ª: {}\n\
        –ë—É–¥–µ—Ç –ø—Ä–æ–¥–∞–Ω–æ ~{:.8} {} —Å–ø–æ—Ç–∞ (–ø–æ —Ä—ã–Ω–∫—É –∏–ª–∏ –ª–∏–º–∏—Ç–∫–æ–π).\n\
        –ë—É–¥–µ—Ç –∫—É–ø–ª–µ–Ω–æ {:.8} {} —Ñ—å—é—á–µ—Ä—Å–∞ (–ø–æ —Ä—ã–Ω–∫—É).\n\n\
        –í—ã —É–≤–µ—Ä–µ–Ω—ã?",
        operation_id, symbol, spot_sell_qty_approx, symbol, fut_qty, symbol
    );
    let kb = make_unhedge_confirmation_keyboard(operation_id);

    let bot_msg_id = if let Some(msg_id) = message_id_to_edit {
        bot.edit_message_text(chat_id, msg_id, text).reply_markup(kb).await?;
        msg_id
    } else {
        bot.send_message(chat_id, text).reply_markup(kb).await?.id
    };

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    {
        let mut state_guard = state_storage.write().expect("Lock failed");
        state_guard.insert(chat_id, UserState::AwaitingUnhedgeConfirmation {
            operation_id,
            last_bot_message_id: Some(bot_msg_id.0),
        });
        info!("User state for {} set to AwaitingUnhedgeConfirmation for op_id {}", chat_id, operation_id);
    }
    Ok(())
}


/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Ö–µ–¥–∂–∞ (–ø—Ä–µ—Ñ–∏–∫—Å u_conf_)
pub async fn handle_unhedge_confirm_callback<E>(
    bot: Bot,
    q: CallbackQuery,
    exchange: Arc<E>,
    state_storage: StateStorage,
    running_operations: RunningOperations,
    cfg: Arc<Config>,
    db: Arc<Db>,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    if let (Some(data), Some(msg)) = (q.data, q.message) {
        let chat_id = msg.chat.id;
        if let Some(payload) = data.strip_prefix(callback_data::PREFIX_UNHEDGE_CONFIRM) {
            if payload == "yes" {
                info!("User {} confirmed unhedge operation", chat_id);

                // –ü–æ–ª—É—á–∞–µ–º ID –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                let operation_id_to_unhedge = {
                    let state_guard = state_storage.read().expect("Lock failed");
                     match state_guard.get(&chat_id) {
                         Some(UserState::AwaitingUnhedgeConfirmation { operation_id, .. }) => *operation_id,
                         _ => {
                             warn!("User {} confirmed unhedge but was in wrong state", chat_id);
                             bot.answer_callback_query(q.id).text("–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.").show_alert(true).await?;
                             let _ = navigation::show_main_menu(&bot, chat_id, Some(msg.id)).await;
                              { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }
                             return Ok(());
                         }
                     }
                };
                 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º
                 { state_storage.write().expect("Lock failed").insert(chat_id, UserState::None); }

                 // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∏—Å—Ö–æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ë–î
                 match crate::storage::get_hedge_operation_by_id(db.as_ref(), operation_id_to_unhedge).await {
                     Ok(Some(original_op)) => {
                         // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ —Å—Ç–∞—Ç—É—Å –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                         if original_op.status != "Completed" || original_op.unhedged_op_id.is_some() {
                              error!("Attempted to unhedge already unhedged or invalid op_id: {}", operation_id_to_unhedge);
                              let _ = bot.edit_message_text(chat_id, msg.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
                                         .reply_markup(navigation::make_main_menu_keyboard())
                                         .await;
                         } else {
                             // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—É—Å–∫–∞
                             let waiting_text = format!("‚è≥ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ID:{}...", operation_id_to_unhedge);
                             bot.edit_message_text(chat_id, msg.id, waiting_text)
                                .reply_markup(InlineKeyboardMarkup::new(Vec::<Vec<InlineKeyboardButton>>::new()))
                                .await?;

                             // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
                             spawn_unhedge_task(
                                 bot.clone(),
                                 exchange.clone(),
                                 cfg.clone(),
                                 db.clone(),
                                 running_operations.clone(),
                                 chat_id,
                                 original_op, // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å—é –æ–ø–µ—Ä–∞—Ü–∏—é
                                 msg.id,      // ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                             ).await;
                         }
                     }
                     Ok(None) => {
                         error!("Hedge operation ID {} not found in DB for unhedge confirmation", operation_id_to_unhedge);
                          let _ = bot.edit_message_text(chat_id, msg.id, "‚ùå –û—à–∏–±–∫–∞: –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.")
                                     .reply_markup(navigation::make_main_menu_keyboard())
                                     .await;
                     }
                     Err(e) => {
                          error!("DB error getting hedge operation {} for unhedge: {}", operation_id_to_unhedge, e);
                          let _ = bot.edit_message_text(chat_id, msg.id, "‚ùå –û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
                                     .reply_markup(navigation::make_main_menu_keyboard())
                                     .await;
                     }
                 }

            } else if payload == "no" {
                 info!("User {} cancelled unhedge at confirmation", chat_id);
                 navigation::handle_cancel_dialog(bot, q, state_storage).await?;
                 return Ok(()); // –í—ã—Ö–æ–¥–∏–º, –∫–æ–ª–±—ç–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            } else {
                 warn!("Invalid payload for unhedge confirmation callback: {}", payload);
            }
        } else {
            warn!("Invalid callback data format for unhedge confirmation: {}", data);
        }
    } else {
        warn!("CallbackQuery missing data or message in handle_unhedge_confirm_callback");
    }
    bot.answer_callback_query(q.id).await?;
    Ok(())
}