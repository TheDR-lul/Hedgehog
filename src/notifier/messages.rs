// src/notifier/messages.rs
use crate::exchange::Exchange;
use super::{UserState, StateStorage};
use teloxide::prelude::*;
use teloxide::types::{Message, MessageId, InlineKeyboardButton, InlineKeyboardMarkup, ChatId};
use tracing::{warn, error, info};
use crate::models::{HedgeRequest, UnhedgeRequest};
use crate::hedger::{Hedger, HedgeParams, HedgeProgressUpdate, HedgeProgressCallback};
use futures::future::FutureExt;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è "—á–∏—Å—Ç–∫–∏" —á–∞—Ç–∞
async fn cleanup_chat(bot: &Bot, chat_id: ChatId, user_msg_id: MessageId, bot_msg_id: Option<i32>) {
    if let Some(id_int) = bot_msg_id {
        if let Err(e) = bot.delete_message(chat_id, MessageId(id_int)).await {
            warn!("Failed to delete previous bot message {}: {}", id_int, e);
        }
    }
    if let Err(e) = bot.delete_message(chat_id, user_msg_id).await {
        warn!("Failed to delete user message {}: {}", user_msg_id, e);
    }
}

// --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º quote_currency –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã ---
pub async fn handle_message<E>(
    bot: Bot,
    msg: Message,
    state_storage: StateStorage,
    exchange: E,
    quote_currency: String, // <-- –î–æ–±–∞–≤–ª–µ–Ω–æ
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    let message_id = msg.id;
    let text = msg.text().unwrap_or("").trim();
    if text.is_empty() {
        if let Err(e) = bot.delete_message(chat_id, message_id).await {
             warn!("Failed to delete empty user message {}: {}", message_id, e);
        }
        return Ok(());
    }

    let user_state = {
        state_storage
            .read()
            .expect("Failed to acquire read lock on state storage")
            .get(&chat_id)
            .cloned()
    };

    match user_state {
        // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –•–ï–î–ñ–ò–†–û–í–ê–ù–ò–Ø ---
        Some(UserState::AwaitingSum { symbol, last_bot_message_id }) => {
            if let Ok(sum) = text.parse::<f64>() {
                if sum <= 0.0 {
                    bot.send_message(chat_id, "‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.").await?;
                    return Ok(());
                }

                cleanup_chat(&bot, chat_id, message_id, last_bot_message_id).await;

                let kb = InlineKeyboardMarkup::new(vec![vec![
                    InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_hedge"),
                ]]);

                // --- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º quote_currency ---
                let bot_msg = bot.send_message(
                    chat_id,
                    format!("–í–≤–µ–¥–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è {} {} (%):", sum, quote_currency), // <-- –ò–∑–º–µ–Ω–µ–Ω–æ
                )
                .reply_markup(kb)
                .await?;
                // --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---

                let mut message_to_delete_if_state_changed: Option<MessageId> = None;
                {
                    let mut state = state_storage
                        .write()
                        .expect("Failed to acquire write lock on state storage");

                    if let Some(current_state @ UserState::AwaitingSum { .. }) = state.get_mut(&chat_id) {
                         *current_state = UserState::AwaitingVolatility {
                            symbol: symbol.clone(),
                            sum,
                            last_bot_message_id: Some(bot_msg.id.0),
                        };
                         info!("User state for {} set to AwaitingVolatility for symbol {}", chat_id, symbol);
                    } else {
                         warn!("User state for {} changed unexpectedly while asking for volatility.", chat_id);
                         message_to_delete_if_state_changed = Some(bot_msg.id);
                    }
                }

                if let Some(delete_id) = message_to_delete_if_state_changed {
                    if let Err(e) = bot.delete_message(chat_id, delete_id).await {
                        warn!("Failed to delete obsolete bot message {}: {}", delete_id, e);
                    }
                }

            } else {
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 –∏–ª–∏ 1000.5).").await?;
            }
        }

        // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –•–ï–î–ñ–ò–†–û–í–ê–ù–ò–Ø ---
        Some(UserState::AwaitingVolatility { symbol, sum, last_bot_message_id }) => {
            if let Ok(vol_raw) = text.trim_end_matches('%').parse::<f64>() {
                if vol_raw < 0.0 {
                    bot.send_message(chat_id, "‚ö†Ô∏è –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.").await?;
                    return Ok(());
                }
                let vol = vol_raw / 100.0;

                cleanup_chat(&bot, chat_id, message_id, last_bot_message_id).await;

                {
                    let mut state = state_storage
                        .write()
                        .expect("Failed to acquire write lock on state storage");
                    state.insert(chat_id, UserState::None);
                }

                // TODO: –í—ã–Ω–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã slippage, commission, max_wait –≤ –∫–æ–Ω—Ñ–∏–≥
                let hedger = Hedger::new(exchange.clone(), 0.005, 0.001, 30);
                let hedge_request = HedgeRequest { sum, symbol: symbol.clone(), volatility: vol };
                info!("Starting hedge calculation for chat_id: {}, request: {:?}", chat_id, hedge_request);

                let hedge_params_result = hedger.calculate_hedge_params(&hedge_request).await;

                let waiting_msg = match hedge_params_result {
                    Ok(ref params) => {
                        // --- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º quote_currency ---
                        bot.send_message(
                            chat_id,
                            format!(
                                "‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} {} ({})... \n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {:.2}\n–û–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {:.2}",
                                sum, quote_currency, params.symbol, params.current_spot_price, params.initial_limit_price // <-- –ò–∑–º–µ–Ω–µ–Ω–æ
                            ),
                        ).await?
                        // --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
                    }
                    Err(ref e) => {
                        error!("Hedge calculation failed for chat_id: {}: {}", chat_id, e);
                        bot.send_message(chat_id, format!("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e)).await?
                    }
                };

                if let Ok(params) = hedge_params_result {
                    info!("Hedge calculation successful. Running hedge execution for chat_id: {}", chat_id);

                    let bot_clone = bot.clone();
                    let waiting_msg_id = waiting_msg.id;
                    let initial_sum = sum;
                    let initial_symbol = params.symbol.clone();
                    let symbol_for_callback = initial_symbol.clone();
                    let qc_for_callback = quote_currency.clone(); // –ö–ª–æ–Ω–∏—Ä—É–µ–º –¥–ª—è –∫–æ–ª–±—ç–∫–∞

                    let progress_callback: HedgeProgressCallback = Box::new(move |update: HedgeProgressUpdate| {
                        let bot = bot_clone.clone();
                        let msg_id = waiting_msg_id;
                        let chat_id = chat_id;
                        let sum = initial_sum;
                        let symbol = symbol_for_callback.clone();
                        let qc = qc_for_callback.clone(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é quote_currency

                        async move {
                            // --- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º quote_currency ---
                            let text = format!(
                                "‚è≥ –•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} {} ({}) –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {:.2}\n–ù–æ–≤–∞—è –æ–∂–∏–¥–∞–µ–º–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {:.2} (–û—Ä–¥–µ—Ä –ø–µ—Ä–µ—Å—Ç–∞–≤–ª–µ–Ω)",
                                sum, qc, symbol, update.current_spot_price, update.new_limit_price // <-- –ò–∑–º–µ–Ω–µ–Ω–æ
                            );
                            // --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
                            if let Err(e) = bot.edit_message_text(chat_id, msg_id, text).await {
                                warn!("Failed to edit message during hedge progress update: {}", e);
                            }
                            Ok(())
                        }
                        .boxed()
                    });

                    match hedger.run_hedge(params, progress_callback).await
                    {
                        Ok((spot_qty, fut_qty)) => {
                            info!("Hedge execution successful for chat_id: {}. Spot: {}, Fut: {}", chat_id, spot_qty, fut_qty);
                            // --- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º quote_currency ---
                            bot.edit_message_text(
                                chat_id,
                                waiting_msg.id,
                                format!(
                                    "‚úÖ –•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} {} ({}) –ø—Ä–∏ V={:.1}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n\nüü¢ –°–ø–æ—Ç –∫—É–ø–ª–µ–Ω–æ: {:.6}\nüî¥ –§—å—é—á –ø—Ä–æ–¥–∞–Ω–æ: {:.6}",
                                    sum, quote_currency, initial_symbol, vol_raw, spot_qty, fut_qty, // <-- –ò–∑–º–µ–Ω–µ–Ω–æ
                                ),
                            )
                            .await?;
                            // --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
                        }
                        Err(e) => {
                            error!("Hedge execution failed for chat_id: {}: {}", chat_id, e);
                             bot.edit_message_text(
                                chat_id,
                                waiting_msg.id,
                                format!("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e)
                             ).await?;
                        }
                    }
                }
            } else {
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60 –∏–ª–∏ 60%).").await?;
            }
        }

        // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –†–ê–°–•–ï–î–ñ–ò–†–û–í–ê–ù–ò–Ø ---
        Some(UserState::AwaitingUnhedgeQuantity { symbol, last_bot_message_id }) => {
            if let Ok(quantity) = text.parse::<f64>() {
                if quantity <= 0.0 {
                    bot.send_message(chat_id, "‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.").await?;
                    return Ok(());
                }

                cleanup_chat(&bot, chat_id, message_id, last_bot_message_id).await;

                {
                    let mut state = state_storage
                        .write()
                        .expect("Failed to acquire write lock on state storage");
                    state.insert(chat_id, UserState::None);
                }

                // TODO: –í—ã–Ω–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã slippage, commission, max_wait –≤ –∫–æ–Ω—Ñ–∏–≥
                let hedger = crate::hedger::Hedger::new(exchange.clone(), 0.005, 0.001, 30);
                // --- –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º quote_currency (—Ö–æ—Ç—è –∑–¥–µ—Å—å –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è) ---
                let waiting_msg = bot.send_message(chat_id, format!("‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} {}...", quantity, symbol)).await?;
                // --- –ö–æ–Ω–µ—Ü –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
                info!("Starting unhedge for chat_id: {}, symbol: {}, quantity: {}", chat_id, symbol, quantity);

                match hedger
                    .run_unhedge(UnhedgeRequest {
                        sum: quantity,
                        symbol: symbol.clone(),
                    })
                    .await
                {
                    Ok((sold, bought)) => {
                        info!("Unhedge successful for chat_id: {}. Sold spot: {}, Bought fut: {}", chat_id, sold, bought);
                        bot.edit_message_text(
                            chat_id,
                            waiting_msg.id,
                            format!(
                                "‚úÖ –†–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} {} –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n\nüü¢ –ü—Ä–æ–¥–∞–Ω–æ —Å–ø–æ—Ç–∞: {:.6}\nüî¥ –ö—É–ø–ª–µ–Ω–æ —Ñ—å—é—á–∞: {:.6}",
                                quantity, symbol, sold, bought,
                            ),
                        )
                        .await?;
                    }
                    Err(e) => {
                        error!("Unhedge failed for chat_id: {}: {}", chat_id, e);
                         bot.edit_message_text(
                            chat_id,
                            waiting_msg.id,
                            format!("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e)
                         ).await?;
                    }
                }

            } else {
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.5).").await?;
            }
        }

        // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
        Some(UserState::AwaitingAssetSelection { last_bot_message_id }) => {
            if let Err(e) = bot.delete_message(chat_id, message_id).await {
                warn!("Failed to delete unexpected user message {}: {}", message_id, e);
            }
            if let Some(_bot_msg_id_int) = last_bot_message_id {
                 info!("User {} sent text while AwaitingAssetSelection.", chat_id);
            }
        }

        // --- –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
        None | Some(UserState::None) => {
            if let Err(e) = bot.delete_message(chat_id, message_id).await {
                warn!("Failed to delete unexpected user message {}: {}", message_id, e);
            }
            bot.send_message(chat_id, "ü§ñ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.").await?;
        }
    }

    Ok(())
}
