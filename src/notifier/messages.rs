use crate::exchange::Exchange;
use super::{UserState, StateStorage};
use teloxide::prelude::*;
use teloxide::types::{Message, MessageId, InlineKeyboardButton, InlineKeyboardMarkup, ChatId};
use tracing::{warn, error, info}; // –ò—Å–ø–æ–ª—å–∑—É–µ–º tracing
use crate::models::{HedgeRequest, UnhedgeRequest}; // –î–æ–±–∞–≤–∏–ª–∏ –∏–º–ø–æ—Ä—Ç—ã

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è "—á–∏—Å—Ç–∫–∏" —á–∞—Ç–∞
async fn cleanup_chat(bot: &Bot, chat_id: ChatId, user_msg_id: MessageId, bot_msg_id: Option<i32>) { // –ü—Ä–∏–Ω–∏–º–∞–µ–º i32
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ)
    if let Some(id_int) = bot_msg_id {
        if let Err(e) = bot.delete_message(chat_id, MessageId(id_int)).await { // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MessageId
            warn!("Failed to delete previous bot message {}: {}", id_int, e);
        }
    }
    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if let Err(e) = bot.delete_message(chat_id, user_msg_id).await {
        warn!("Failed to delete user message {}: {}", user_msg_id, e);
    }
}


pub async fn handle_message<E>(
    bot: Bot,
    msg: Message,
    state_storage: StateStorage,
    exchange: E,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    let message_id = msg.id;
    let text = msg.text().unwrap_or("").trim();
    if text.is_empty() {
        if let Err(e) = bot.delete_message(chat_id, message_id).await {
             warn!("Failed to delete empty user message {}: {}", message_id, e);
        }
        return Ok(());
    }

    let user_state = {
        state_storage
            .read()
            .expect("Failed to acquire read lock on state storage")
            .get(&chat_id)
            .cloned()
    };

    match user_state {
        // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–ª—è –•–ï–î–ñ–ò–†–û–í–ê–ù–ò–Ø ---
        Some(UserState::AwaitingSum { symbol, last_bot_message_id }) => {
            if let Ok(sum) = text.parse::<f64>() {
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —Å—É–º–º—É
                if sum <= 0.0 {
                    bot.send_message(chat_id, "‚ö†Ô∏è –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.").await?;
                    return Ok(()); // –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                }

                cleanup_chat(&bot, chat_id, message_id, last_bot_message_id).await;

                let kb = InlineKeyboardMarkup::new(vec![vec![
                    InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_hedge"),
                ]]);

                let bot_msg = bot.send_message(
                    chat_id,
                    format!("–í–≤–µ–¥–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è {} (%):", symbol),
                )
                .reply_markup(kb)
                .await?;

                let mut message_to_delete_if_state_changed: Option<MessageId> = None;
                {
                    let mut state = state_storage
                        .write()
                        .expect("Failed to acquire write lock on state storage");

                    if let Some(current_state @ UserState::AwaitingSum { .. }) = state.get_mut(&chat_id) {
                         *current_state = UserState::AwaitingVolatility {
                            symbol: symbol.clone(),
                            sum,
                            last_bot_message_id: Some(bot_msg.id.0),
                        };
                         info!("User state for {} set to AwaitingVolatility for symbol {}", chat_id, symbol);
                    } else {
                         warn!("User state for {} changed unexpectedly while asking for volatility.", chat_id);
                         message_to_delete_if_state_changed = Some(bot_msg.id);
                    }
                }

                if let Some(delete_id) = message_to_delete_if_state_changed {
                    if let Err(e) = bot.delete_message(chat_id, delete_id).await {
                        warn!("Failed to delete obsolete bot message {}: {}", delete_id, e);
                    }
                }

            } else {
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 –∏–ª–∏ 1000.5).").await?;
            }
        }

        // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –•–ï–î–ñ–ò–†–û–í–ê–ù–ò–Ø ---
        Some(UserState::AwaitingVolatility { symbol, sum, last_bot_message_id }) => {
            if let Ok(vol_raw) = text.trim_end_matches('%').parse::<f64>() {
                 // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                if vol_raw < 0.0 {
                    bot.send_message(chat_id, "‚ö†Ô∏è –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.").await?;
                    return Ok(()); // –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                }
                let vol = vol_raw / 100.0;

                cleanup_chat(&bot, chat_id, message_id, last_bot_message_id).await;

                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º –¥–æ–ª–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                {
                    let mut state = state_storage
                        .write()
                        .expect("Failed to acquire write lock on state storage");
                    state.insert(chat_id, UserState::None);
                }

                // –°–æ–∑–¥–∞–µ–º Hedger (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Å–µ –µ—â–µ —Ö–∞—Ä–¥–∫–æ–¥)
                let hedger = crate::hedger::Hedger::new(exchange.clone(), 0.005, 0.001, 30);
                let waiting_msg = bot.send_message(chat_id, "‚è≥ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è...").await?;
                info!("Starting hedge for chat_id: {}, symbol: {}, sum: {}, vol: {}", chat_id, symbol, sum, vol);

                // –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
                match hedger
                    .run_hedge(HedgeRequest { // –ò—Å–ø–æ–ª—å–∑—É–µ–º HedgeRequest
                        sum,
                        symbol: symbol.clone(),
                        volatility: vol,
                    })
                    .await
                {
                    Ok((spot, fut)) => {
                        info!("Hedge successful for chat_id: {}. Spot: {}, Fut: {}", chat_id, spot, fut);
                        bot.edit_message_text(
                            chat_id,
                            waiting_msg.id,
                            format!(
                                "‚úÖ –•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} USDT {} –ø—Ä–∏ V={:.1}% –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n\nüü¢ –°–ø–æ—Ç: {:.4}\nüî¥ –§—å—é—á–µ—Ä—Å: {:.4}",
                                sum, symbol, vol_raw, spot, fut,
                            ),
                        )
                        .await?;
                    }
                    Err(e) => {
                        error!("Hedge failed for chat_id: {}: {}", chat_id, e);
                         bot.edit_message_text(
                            chat_id,
                            waiting_msg.id,
                            format!("‚ùå –û—à–∏–±–∫–∞ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e)
                         ).await?;
                    }
                }

            } else {
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 60 –∏–ª–∏ 60%).").await?;
            }
        }

        // --- –ù–û–í–ê–Ø –í–ï–¢–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –†–ê–°–•–ï–î–ñ–ò–†–û–í–ê–ù–ò–Ø ---
        Some(UserState::AwaitingUnhedgeQuantity { symbol, last_bot_message_id }) => {
            if let Ok(quantity) = text.parse::<f64>() {
                 // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if quantity <= 0.0 {
                    bot.send_message(chat_id, "‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.").await?;
                    return Ok(()); // –ù–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                }

                cleanup_chat(&bot, chat_id, message_id, last_bot_message_id).await;

                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º –¥–æ–ª–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
                {
                    let mut state = state_storage
                        .write()
                        .expect("Failed to acquire write lock on state storage");
                    state.insert(chat_id, UserState::None);
                }

                // –°–æ–∑–¥–∞–µ–º Hedger (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤—Å–µ –µ—â–µ —Ö–∞—Ä–¥–∫–æ–¥)
                let hedger = crate::hedger::Hedger::new(exchange.clone(), 0.005, 0.001, 30);
                let waiting_msg = bot.send_message(chat_id, "‚è≥ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è...").await?;
                info!("Starting unhedge for chat_id: {}, symbol: {}, quantity: {}", chat_id, symbol, quantity);

                // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
                match hedger
                    .run_unhedge(UnhedgeRequest { // –ò—Å–ø–æ–ª—å–∑—É–µ–º UnhedgeRequest
                        sum: quantity, // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∫ 'sum' –≤ UnhedgeRequest
                        symbol: symbol.clone(),
                    })
                    .await
                {
                    Ok((sold, bought)) => {
                        info!("Unhedge successful for chat_id: {}. Sold spot: {}, Bought fut: {}", chat_id, sold, bought);
                        bot.edit_message_text(
                            chat_id,
                            waiting_msg.id,
                            format!(
                                "‚úÖ –†–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} {} –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n\nüü¢ –ü—Ä–æ–¥–∞–Ω–æ —Å–ø–æ—Ç–∞: {:.4}\nüî¥ –ö—É–ø–ª–µ–Ω–æ —Ñ—å—é—á–∞: {:.4}",
                                quantity, symbol, sold, bought, // –ò—Å–ø–æ–ª—å–∑—É–µ–º quantity –≤ —Ç–µ–∫—Å—Ç–µ
                            ),
                        )
                        .await?;
                    }
                    Err(e) => {
                        error!("Unhedge failed for chat_id: {}: {}", chat_id, e);
                         bot.edit_message_text(
                            chat_id,
                            waiting_msg.id,
                            format!("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e)
                         ).await?;
                    }
                }

            } else {
                bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10.5).").await?;
            }
        }


        // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
        Some(UserState::AwaitingAssetSelection { last_bot_message_id }) => {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞
            if let Err(e) = bot.delete_message(chat_id, message_id).await {
                warn!("Failed to delete unexpected user message {}: {}", message_id, e);
            }
            // –ù–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É
            if let Some(bot_msg_id_int) = last_bot_message_id {
                 // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
                 // bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –∫–Ω–æ–ø–∫–æ–π –≤—ã—à–µ.").await?;
                 // –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                 info!("User {} sent text while AwaitingAssetSelection.", chat_id);
            }
        }

        // --- –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
        None | Some(UserState::None) => { // –û–±—ä–µ–¥–∏–Ω—è–µ–º None –∏ UserState::None
            if let Err(e) = bot.delete_message(chat_id, message_id).await {
                warn!("Failed to delete unexpected user message {}: {}", message_id, e);
            }
            bot.send_message(chat_id, "ü§ñ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.").await?;
        }
    }

    Ok(())
}
