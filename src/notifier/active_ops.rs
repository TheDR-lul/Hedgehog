// src/notifier/active_ops.rs

use super::{
    RunningOperations, RunningOperationInfo, OperationType, callback_data, navigation, StateStorage // –£–±—Ä–∞–Ω—ã Command, UserState
};
use crate::config::Config;
use crate::exchange::{Exchange, OrderSide};
use crate::storage::{Db, update_hedge_final_status};
use crate::hedger::ORDER_FILL_TOLERANCE;
use crate::notifier::HashMap; // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ RunningOperations
use std::sync::Arc;
use teloxide::prelude::*;
use teloxide::types::{
    InlineKeyboardButton, InlineKeyboardMarkup, Message, MessageId, CallbackQuery, ChatId,
};
use teloxide::requests::Requester;
use tracing::{info, warn, error};
use tokio::sync::MutexGuard; // –£–±—Ä–∞–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π Mutex as TokioMutex

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π ---
async fn format_active_operations(
    running_operations: &RunningOperations,
    chat_id: ChatId,
) -> (String, InlineKeyboardMarkup) {
    let ops_guard = running_operations.lock().await;
    let user_ops: Vec<_> = ops_guard
        .iter()
        .filter(|((op_chat_id, _op_id), _info)| *op_chat_id == chat_id)
        .collect();

    if user_ops.is_empty() {
        let text = "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è.".to_string();
        let keyboard = InlineKeyboardMarkup::new(vec![vec![
            InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::BACK_TO_MAIN),
        ]]);
        return (text, keyboard);
    }

    let mut text = format!("‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ({} —à—Ç.):\n\n", user_ops.len());
    let mut buttons: Vec<Vec<InlineKeyboardButton>> = Vec::new();

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –æ–ø–µ—Ä–∞—Ü–∏–∏
    let mut sorted_user_ops = user_ops;
    sorted_user_ops.sort_by_key(|((_, op_id), _)| *op_id);

    for ((_op_chat_id, op_id), info) in sorted_user_ops {
        let op_type_str = match info.operation_type {
            OperationType::Hedge => "–•–µ–¥–∂",
            OperationType::Unhedge => "–†–∞—Å—Ö–µ–¥–∂",
        };
        let filled_qty = *info.total_filled_spot_qty.lock().await;
        // TODO: –ü–æ–ª—É—á–∏—Ç—å target_qty?
        text.push_str(&format!(
            "üîπ ID:{} ({}) - {} \n   –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–ø–æ—Ç: ~{:.6} (?)\n",
            op_id, info.symbol, op_type_str, filled_qty
        ));
        let cancel_data = format!("{}{}", callback_data::PREFIX_CANCEL_ACTIVE_OP, op_id);
        buttons.push(vec![InlineKeyboardButton::callback(
            format!("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ID:{}", op_id),
            cancel_data,
        )]);
    }

    buttons.push(vec![InlineKeyboardButton::callback(
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data::BACK_TO_MAIN,
    )]);

    (text, InlineKeyboardMarkup::new(buttons))
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ö–æ–º–∞–Ω–¥ –∏ –ö–æ–ª–±—ç–∫–æ–≤ ---

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /active
pub async fn handle_active_command<E>(
    bot: Bot,
    msg: Message,
    _exchange: Arc<E>,
    _state_storage: StateStorage,
    running_operations: RunningOperations,
    _cfg: Arc<Config>,
    _db: Arc<Db>,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    info!("Processing /active command for chat_id: {}", chat_id);

    let (text, keyboard) = format_active_operations(&running_operations, chat_id).await;
    bot.send_message(chat_id, text)
        .reply_markup(keyboard)
        .await?;

    if let Err(e) = bot.delete_message(chat_id, msg.id).await {
        warn!("Failed to delete /active command message: {}", e);
    }
    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
pub async fn handle_menu_active_ops_callback(
    bot: Bot,
    query: CallbackQuery,
    running_operations: RunningOperations,
    _state_storage: StateStorage,
) -> anyhow::Result<()> {
    if let Some(msg) = query.message {
        let chat_id = msg.chat().id;
        info!(
            "Processing '{}' callback for chat_id: {}",
            callback_data::MENU_ACTIVE_OPS,
            chat_id
        );

        let (text, keyboard) = format_active_operations(&running_operations, chat_id).await;
        bot.edit_message_text(chat_id, msg.id(), text)
            .reply_markup(keyboard)
            .await?;
    } else {
        warn!("CallbackQuery missing message in handle_menu_active_ops_callback");
    }
    bot.answer_callback_query(query.id).await?;
    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–µ—Ñ–∏–∫—Å cancel_op_)
pub async fn handle_cancel_active_op_callback<E>(
    bot: Bot,
    query: CallbackQuery,
    exchange: Arc<E>,
    _state_storage: StateStorage,
    running_operations: RunningOperations,
    _cfg: Arc<Config>, // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è cfg –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    db: Arc<Db>,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    if let (Some(data), Some(msg)) = (query.data, query.message) {
        let chat_id = msg.chat().id;
        if let Some(operation_id_str) = data.strip_prefix(callback_data::PREFIX_CANCEL_ACTIVE_OP) {
            if let Ok(operation_id_to_cancel) = operation_id_str.parse::<i64>() {
                info!(
                    "User {} requested cancellation for active operation ID: {}",
                    chat_id, operation_id_to_cancel
                );

                let mut operation_info_opt: Option<RunningOperationInfo> = None;
                let mut current_spot_order_id_to_cancel_opt: Option<String> = None; // –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
                let mut filled_spot_qty_in_operation: f64 = 0.0;

                // --- –ë–ª–æ–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –º–∞–ø—ã ---
                {
                    let mut ops_guard: MutexGuard<
                        '_,
                        HashMap<(ChatId, i64), RunningOperationInfo>,
                    > = running_operations.lock().await;
                    if let Some(info) = ops_guard.remove(&(chat_id, operation_id_to_cancel)) {
                        current_spot_order_id_to_cancel_opt = // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
                            info.current_spot_order_id.lock().await.clone();
                        filled_spot_qty_in_operation = *info.total_filled_spot_qty.lock().await;
                        operation_info_opt = Some(info);
                        info!(
                            "op_id:{}: Found active operation, removed from map.",
                            operation_id_to_cancel
                        );
                    } else {
                        warn!(
                            "op_id:{}: Active operation not found in map for cancellation request.",
                            operation_id_to_cancel
                        );
                        bot.answer_callback_query(query.id)
                            .text("–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                            .show_alert(true)
                            .await?;
                        let _ = bot
                            .edit_message_text(chat_id, msg.id(), "‚ÑπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
                            .reply_markup(navigation::make_main_menu_keyboard())
                            .await;
                        return Ok(());
                    }
                }

                // --- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–º–µ–Ω—É ---
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º operation_info_opt –Ω–∞–ø—Ä—è–º—É—é
                if let Some(operation_info) = operation_info_opt { // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∞
                    let symbol = operation_info.symbol.clone();
                    let bot_message_id_to_edit = MessageId(operation_info.bot_message_id);
                    let operation_type = operation_info.operation_type;

                    info!("op_id:{}: Aborting task...", operation_id_to_cancel);
                    operation_info.handle.abort();

                    let cancelling_text = format!(
                        "‚è≥ –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ ID:{} ({}) ...",
                        operation_id_to_cancel, symbol
                    );
                    let _ = bot
                        .edit_message_text(chat_id, bot_message_id_to_edit, cancelling_text)
                        .reply_markup(InlineKeyboardMarkup::new( // –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–∑—É
                            Vec::<Vec<InlineKeyboardButton>>::new(),
                        ))
                        .await;

                    // --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã ---
                    let mut final_error_message: Option<String> = None; // –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    let mut net_spot_change_on_cancel = 0.0;

                    // 1. –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if let Some(ref order_id) = current_spot_order_id_to_cancel_opt { // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
                        info!(
                            "op_id:{}: Cancelling current order {} ({:?})",
                            operation_id_to_cancel, order_id, operation_type
                        );
                        match exchange.cancel_order(&symbol, order_id).await {
                            Ok(_) => info!(
                                "op_id:{}: Order cancel request sent OK.",
                                operation_id_to_cancel
                            ),
                            Err(e) => {
                                warn!(
                                    "op_id:{}: Order cancel FAILED: {}. Might be already filled/cancelled.",
                                    operation_id_to_cancel, e
                                );
                                final_error_message = Some(format!("Failed cancel order: {}", e));
                            }
                        }
                        tokio::time::sleep(std::time::Duration::from_millis(500)).await;
                    }

                    // 2. –ö–æ–º–ø–µ–Ω—Å–∏—Ä—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –±–∏—Ä–∂–µ
                    match operation_type {
                        OperationType::Hedge => {
                            if filled_spot_qty_in_operation > ORDER_FILL_TOLERANCE {
                                info!(
                                    "op_id:{}: Hedge cancelled. Attempting to sell filled spot qty: {}",
                                    operation_id_to_cancel, filled_spot_qty_in_operation
                                );
                                let current_balance = match exchange.get_balance(&symbol).await {
                                    Ok(b) => b.free,
                                    Err(e) => {
                                        error!("op_id:{}: Failed get balance before selling spot: {}", operation_id_to_cancel, e);
                                        if final_error_message.is_none() { // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –¥—Ä—É–≥–æ–π
                                            final_error_message = Some(format!("Failed get balance: {}", e));
                                        }
                                        0.0
                                    }
                                };

                                let qty_to_sell = filled_spot_qty_in_operation.min(current_balance);
                                if qty_to_sell > ORDER_FILL_TOLERANCE {
                                     match exchange.place_spot_market_order(&symbol, OrderSide::Sell, qty_to_sell).await {
                                        Ok(order) => {
                                            info!("op_id:{}: Spot Sell OK on hedge cancel: order_id={}, qty={}", operation_id_to_cancel, order.id, qty_to_sell);
                                            net_spot_change_on_cancel = qty_to_sell;
                                        }
                                        Err(e) => {
                                            error!("op_id:{}: Spot Sell FAILED on hedge cancel: {}", operation_id_to_cancel, e);
                                             if final_error_message.is_none() {
                                                final_error_message = Some(format!("Failed sell spot: {}", e));
                                            }
                                        }
                                    }
                                } else {
                                    warn!("op_id:{}: Spot balance ({}) too low to sell filled qty ({}) on hedge cancel.", operation_id_to_cancel, current_balance, filled_spot_qty_in_operation);
                                     if final_error_message.is_none() { // –°–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫
                                        final_error_message = Some("Balance too low to sell filled spot.".to_string());
                                    }
                                }
                            } else {
                                info!(
                                    "op_id:{}: No significant spot filled ({}) during hedge cancel, skipping sell.",
                                    operation_id_to_cancel, filled_spot_qty_in_operation
                                );
                            }
                        }
                        OperationType::Unhedge => {
                            warn!(
                                "op_id:{}: Unhedge cancellation logic: Assuming futures were not bought yet. No futures action taken.",
                                operation_id_to_cancel
                            );
                            if filled_spot_qty_in_operation > ORDER_FILL_TOLERANCE {
                                warn!(
                                     "op_id:{}: Unhedge cancelled. Spot sell progress was {}. Buy back logic NOT IMPLEMENTED.",
                                     operation_id_to_cancel, filled_spot_qty_in_operation
                                );
                                // TODO: Implement spot buy back if run_unhedge changes
                            }
                        }
                    }

                    // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
                    let final_db_status = "Cancelled";
                    let final_spot_qty_for_db = match operation_type {
                         OperationType::Hedge => net_spot_change_on_cancel,
                         OperationType::Unhedge => 0.0, // TODO: –£—Ç–æ—á–Ω–∏—Ç—å
                    };

                    // ---- –ò–°–ü–†–ê–í–õ–ï–ù–û: –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è move error ----
                    let cancel_reason_str = "cancelled by user";
                    // –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è –ë–î
                    let final_error_text_for_db: Option<String>;
                    if let Some(err_msg) = &final_error_message {
                        final_error_text_for_db = Some(err_msg.clone());
                    } else {
                        final_error_text_for_db = Some(cancel_reason_str.to_string());
                    }
                    // ---- –ö–æ–Ω–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ----

                    // –í—ã–∑—ã–≤–∞–µ–º update_hedge_final_status —Å –ö–û–†–†–ï–ö–¢–ù–´–ú–ò –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    if let Err(db_err) = update_hedge_final_status(
                        db.as_ref(),
                        operation_id_to_cancel,
                        final_db_status, // "Cancelled"
                        None,          // futures_order_id –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–±—ã—á–Ω–æ None
                        0.0,           // futures_filled_qty –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ = 0.0 (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
                        final_error_text_for_db.as_deref(),
                    )
                    .await
                    {
                        error!(
                            "op_id:{}: Failed DB update after cancellation: {}",
                            operation_id_to_cancel, db_err
                        );
                         if final_error_message.is_none() {
                            final_error_message = Some(format!("DB update failed: {}", db_err));
                         }
                    } else {
                        // –õ–æ–≥–∏—Ä—É–µ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Ç–∞, –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ, —Ö–æ—Ç—è –æ–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ DB –≤ —ç—Ç–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–µ
                        info!(
                            "op_id:{}: DB status updated to '{}'. Spot qty changed on cancel: {}",
                            operation_id_to_cancel, final_db_status, final_spot_qty_for_db
                        );
                    }

                    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Ç–∞, –ø—Ä–æ–¥–∞–Ω–Ω–æ–µ/–∫—É–ø–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ (`final_spot_qty_for_db`),
                    // –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î —Ñ—É–Ω–∫—Ü–∏–µ–π `update_hedge_final_status`.
                    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏ –≤ `storage/db.rs`
                    // –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π SQL-–∑–∞–ø—Ä–æ—Å UPDATE, –¥–æ–±–∞–≤–∏–≤ –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä/–ø–æ–ª–µ.


                    // 4. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    let mut final_text = format!(
                        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è ID:{} ({}, {}) –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                        operation_id_to_cancel, symbol, operation_type.as_str()
                    );
                     match operation_type {
                         OperationType::Hedge => {
                              if net_spot_change_on_cancel > ORDER_FILL_TOLERANCE {
                                  final_text.push_str(&format!("\n–ü—Ä–æ–¥–∞–Ω–æ ~{:.8} {} —Å–ø–æ—Ç–∞.", net_spot_change_on_cancel, symbol));
                              } else if filled_spot_qty_in_operation > ORDER_FILL_TOLERANCE {
                                   // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —Ä–µ–∞–ª—å–Ω–æ –±—ã–ª–∞
                                   if final_error_message.as_ref().map_or(false, |s| s.contains("Failed sell spot") || s.contains("Failed get balance") || s.contains("Balance too low")) {
                                        final_text.push_str("\n–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Å–ø–æ—Ç –Ω–µ —É–¥–∞–ª–∞—Å—å.");
                                   }
                              }
                         }
                         OperationType::Unhedge => {
                             // –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                         }
                     }
                     // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ (final_error_message –Ω–µ –±—ã–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω)
                     if let Some(err_msg) = final_error_message { // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ
                         final_text.push_str(&format!("\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {}", err_msg));
                     }

                    let _ = bot
                        .edit_message_text(chat_id, bot_message_id_to_edit, final_text)
                        .reply_markup(navigation::make_main_menu_keyboard())
                        .await;
                }
                // –ï—Å–ª–∏ operation_info_opt –±—ã–ª None (—Ç.–µ. Some –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª), –∑–Ω–∞—á–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
                // –≠—Ç–æ—Ç —Å–ª—É—á–∞–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –±–ª–æ–∫–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

            } else {
                error!(
                    "Failed to parse operation_id from cancel callback data: {}",
                    operation_id_str
                );
                bot.answer_callback_query(query.id)
                    .text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏.")
                    .await?;
            }
        } else {
            warn!(
                "Invalid callback data format for cancel active operation: {}",
                data
            );
            bot.answer_callback_query(query.id)
                .text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
                .await?;
        }
    } else {
        warn!("CallbackQuery missing data or message in handle_cancel_active_op_callback");
        bot.answer_callback_query(query.id).await?;
    }
    Ok(())
}


impl OperationType {
    fn as_str(&self) -> &'static str {
        match self {
            OperationType::Hedge => "–•–µ–¥–∂",
            OperationType::Unhedge => "–†–∞—Å—Ö–µ–¥–∂",
        }
    }
}