// src/notifier/active_ops.rs

use super::{Command, StateStorage, UserState, RunningOperations, RunningOperationInfo, OperationType, callback_data, navigation};
use crate::config::Config;
use crate::exchange::{Exchange, OrderSide}; // –î–æ–±–∞–≤–∏–ª–∏ OrderSide
use crate::storage::{Db, update_hedge_final_status}; // –î–æ–±–∞–≤–∏–ª–∏ update_hedge_final_status
use crate::hedger::ORDER_FILL_TOLERANCE;
use crate::notifier::HashMap;
use std::sync::Arc;
use teloxide::prelude::*;
use teloxide::types::{
    InlineKeyboardButton, InlineKeyboardMarkup, Message, MessageId, CallbackQuery, ChatId,
};
use teloxide::requests::Requester; // –î–ª—è answer_callback_query
use tracing::{info, warn, error};
use tokio::sync::MutexGuard; // –î–ª—è —Ä–∞–±–æ—Ç—ã —Å MutexGuard

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π ---
async fn format_active_operations(
    running_operations: &RunningOperations,
    chat_id: ChatId,
) -> (String, InlineKeyboardMarkup) {
    let ops_guard = running_operations.lock().await;
    let user_ops: Vec<_> = ops_guard.iter()
        .filter(|((op_chat_id, _op_id), _info)| *op_chat_id == chat_id)
        .collect();

    if user_ops.is_empty() {
        let text = "‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è.".to_string();
        let kb = InlineKeyboardMarkup::new(vec![vec![
             InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::BACK_TO_MAIN)
        ]]);
        return (text, kb);
    }

    let mut text = format!("‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ({} —à—Ç.):\n\n", user_ops.len());
    let mut buttons: Vec<Vec<InlineKeyboardButton>> = Vec::new();

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –æ–ø–µ—Ä–∞—Ü–∏–∏ (–∏–ª–∏ –º–æ–∂–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞, –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å)
    let mut sorted_user_ops = user_ops;
    sorted_user_ops.sort_by_key(|((_, op_id), _)| *op_id);

    for ((_op_chat_id, op_id), info) in sorted_user_ops {
        let op_type_str = match info.operation_type {
            OperationType::Hedge => "–•–µ–¥–∂",
            OperationType::Unhedge => "–†–∞—Å—Ö–µ–¥–∂",
        };
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å (—Ç—Ä–µ–±—É–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º—å—é—Ç–µ–∫—Å–∞)
        let filled_qty = *info.total_filled_spot_qty.lock().await;
        // TODO: –ü–æ–ª—É—á–∏—Ç—å target_qty –∏–∑ –ë–î –∏–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –≤ RunningOperationInfo?
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª –∏ —Ç–∏–ø
        text.push_str(&format!(
            "üîπ ID:{} ({}) - {} \n   –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–ø–æ—Ç: ~{:.6} (?)\n",
            op_id, info.symbol, op_type_str, filled_qty
        ));
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
        let cancel_data = format!("{}{}", callback_data::PREFIX_CANCEL_ACTIVE_OP, op_id);
        buttons.push(vec![
            InlineKeyboardButton::callback(format!("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å ID:{}", op_id), cancel_data)
        ]);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
    buttons.push(vec![InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::BACK_TO_MAIN)]);

    (text, InlineKeyboardMarkup::new(buttons))
}


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ö–æ–º–∞–Ω–¥ –∏ –ö–æ–ª–±—ç–∫–æ–≤ ---

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /active
pub async fn handle_active_command<E>(
    bot: Bot,
    msg: Message,
    _exchange: Arc<E>, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
    _state_storage: StateStorage, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
    running_operations: RunningOperations,
    _cfg: Arc<Config>, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
    _db: Arc<Db>, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    info!("Processing /active command for chat_id: {}", chat_id);

    // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
    let (text, kb) = format_active_operations(&running_operations, chat_id).await;
    bot.send_message(chat_id, text).reply_markup(kb).await?;

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    if let Err(e) = bot.delete_message(chat_id, msg.id).await {
        warn!("Failed to delete /active command message: {}", e);
    }
    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
pub async fn handle_menu_active_ops_callback(
    bot: Bot,
    q: CallbackQuery,
    running_operations: RunningOperations,
    _state_storage: StateStorage, // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
) -> anyhow::Result<()> {
     if let Some(msg) = q.message {
        let chat_id = msg.chat().id;
        info!("Processing '{}' callback for chat_id: {}", callback_data::MENU_ACTIVE_OPS, chat_id);

        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        let (text, kb) = format_active_operations(&running_operations, chat_id).await;
        bot.edit_message_text(chat_id, msg.id(), text).reply_markup(kb).await?;
     } else {
         warn!("CallbackQuery missing message in handle_menu_active_ops_callback");
     }
    bot.answer_callback_query(q.id).await?;
    Ok(())
}


/// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø—Ä–µ—Ñ–∏–∫—Å cancel_op_)
pub async fn handle_cancel_active_op_callback<E>(
    bot: Bot,
    q: CallbackQuery,
    exchange: Arc<E>, // –ù—É–∂–µ–Ω –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞ –∏ –ø—Ä–æ–¥–∞–∂–∏ —Å–ø–æ—Ç–∞
    _state_storage: StateStorage, // –ù–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å
    running_operations: RunningOperations,
    _cfg: Arc<Config>, // –ú–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è QuoteCurrency
    db: Arc<Db>,
) -> anyhow::Result<()>
 where
     E: Exchange + Clone + Send + Sync + 'static,
 {
    if let (Some(data), Some(msg)) = (q.data, q.message) {
        let chat_id = msg.chat().id;
        if let Some(op_id_str) = data.strip_prefix(callback_data::PREFIX_CANCEL_ACTIVE_OP) {
            if let Ok(operation_id_to_cancel) = op_id_str.parse::<i64>() {
                 info!("User {} requested cancellation for active operation ID: {}", chat_id, operation_id_to_cancel);

                 let mut operation_info_opt: Option<RunningOperationInfo> = None;
                 let mut current_spot_order_id_to_cancel: Option<String> = None;
                 let mut filled_spot_qty_to_sell: f64 = 0.0;

                 // --- –ë–ª–æ–∫ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –º–∞–ø—ã ---
                 {
                     let mut ops_guard: MutexGuard<'_, HashMap<(ChatId, i64), RunningOperationInfo>> = running_operations.lock().await;
                     // –ü—ã—Ç–∞–µ–º—Å—è –ò–ó–í–õ–ï–ß–¨ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
                     if let Some(info) = ops_guard.remove(&(chat_id, operation_id_to_cancel)) {
                         // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ü–ï–†–ï–î —Ç–µ–º, –∫–∞–∫ –æ—Ç–ø—É—Å—Ç–∏—Ç—å info
                         current_spot_order_id_to_cancel = info.current_spot_order_id.lock().await.clone();
                         filled_spot_qty_to_sell = *info.total_filled_spot_qty.lock().await;
                         operation_info_opt = Some(info); // info –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è —Å—é–¥–∞
                         info!("op_id:{}: Found active operation, removed from map.", operation_id_to_cancel);
                     } else {
                          warn!("op_id:{}: Active operation not found in map for cancellation request.", operation_id_to_cancel);
                           bot.answer_callback_query(q.id).text("–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞.").show_alert(true).await?;
                          // –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ msg.id, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                           let _ = bot.edit_message_text(chat_id, msg.id(), "‚ÑπÔ∏è –û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
                                      .reply_markup(navigation::make_main_menu_keyboard()) // –ò–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö?
                                      .await;
                          return Ok(()); // –í—ã—Ö–æ–¥–∏–º
                     }
                 } // ops_guard —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω

                 // --- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–º–µ–Ω—É ---
                 if let Some(op_info) = operation_info_opt {
                     let symbol = op_info.symbol.clone();
                     let bot_message_id_to_edit = MessageId(op_info.bot_message_id);

                      info!("op_id:{}: Aborting task...", operation_id_to_cancel);
                      op_info.handle.abort(); // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É hedger'a

                     // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
                     let cancelling_text = format!("‚è≥ –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ ID:{} ({}) ...", operation_id_to_cancel, symbol);
                     let _ = bot.edit_message_text(chat_id, bot_message_id_to_edit, cancelling_text)
                                .reply_markup(InlineKeyboardMarkup::new(Vec::<Vec<InlineKeyboardButton>>::new()))
                                .await;

                     // --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è) ---
                     // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω—É—é –ª–æ–≥–∏–∫—É –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–æ–≤ –∏ –ø—Ä–æ–¥–∞–∂–∏ —Å–ø–æ—Ç–∞, –∫–∞–∫ –≤ callbacks.old.txt
                     let mut final_error_msg: Option<String> = None;
                     let mut actual_sold_qty = 0.0;

                     // 1. –û—Ç–º–µ–Ω–∞ —Å–ø–æ—Ç–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                     if let Some(ref order_id) = current_spot_order_id_to_cancel {
                         info!("op_id:{}: Cancelling spot order {}", operation_id_to_cancel, order_id);
                         match exchange.cancel_order(&symbol, order_id).await {
                             Ok(_) => info!("op_id:{}: Spot order cancel request sent OK.", operation_id_to_cancel),
                             Err(e) => {
                                 warn!("op_id:{}: Spot order cancel FAILED: {}", operation_id_to_cancel, e);
                                 final_error_msg = Some(format!("Failed cancel spot order: {}", e));
                             }
                         }
                     }

                    // 2. –ü—Ä–æ–¥–∞–∂–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–æ—Ç–∞ (–µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª —Ö–µ–¥–∂ –∏ —á—Ç–æ-—Ç–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ)
                    // –í–ê–ñ–ù–û: –î–ª—è Unhedge –ª–æ–≥–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–π - –ø–æ–∫—É–ø–∫–∞ —Ñ—å—é—á–∞!
                    if op_info.operation_type == OperationType::Hedge && filled_spot_qty_to_sell > ORDER_FILL_TOLERANCE {
                         warn!("op_id:{}: Spot sell logic upon cancellation is NOT IMPLEMENTED yet. Filled qty: {}", operation_id_to_cancel, filled_spot_qty_to_sell);
                         // TODO: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å, –ø—Ä–æ–¥–∞—Ç—å –ø–æ —Ä—ã–Ω–∫—É `filled_spot_qty_to_sell`, –æ–±–Ω–æ–≤–∏—Ç—å `actual_sold_qty`
                         // final_error_msg = Some("Spot sell on cancel not implemented".to_string());
                         actual_sold_qty = filled_spot_qty_to_sell; // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ, —á—Ç–æ –±—ã–ª–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ
                    } else if op_info.operation_type == OperationType::Unhedge {
                         warn!("op_id:{}: Unhedge cancellation logic (buy futures?) NOT IMPLEMENTED yet.", operation_id_to_cancel);
                         // TODO: –ù—É–∂–Ω–∞ –ª–∏ –∑–¥–µ—Å—å –ø–æ–∫—É–ø–∫–∞ —Ñ—å—é—á–µ—Ä—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Ö–µ–¥–∂–∞? –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –¢–ó.
                    }


                     // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î
                     let final_db_status = "Cancelled";
                     // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ë–î (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏/–ø–æ–∫—É–ø–∫–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ)
                     let qty_for_db = if op_info.operation_type == OperationType::Hedge { actual_sold_qty } else { 0.0 }; // –ü—Ä–∏–º–µ—Ä

                     // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è —Å–ª—É—á–∞—è –æ—Ç–º–µ–Ω—ã
                     let cancel_reason = Some("cancelled by user".to_string());
                     let final_error_text = final_error_msg.or(cancel_reason);


                     if let Err(e) = update_hedge_final_status(
                         db.as_ref(),
                         operation_id_to_cancel,
                         final_db_status,
                         None, // futures_order_id - –Ω–µ—Ç –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
                         qty_for_db, // –ò—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ (—Å–ø–æ—Ç–∞ –ø—Ä–∏ —Ö–µ–¥–∂–µ)
                         final_error_text.as_deref(),
                     ).await {
                         error!("op_id:{}: Failed DB update after cancellation: {}", operation_id_to_cancel, e);
                     } else {
                         info!("op_id:{}: DB status updated to '{}'", operation_id_to_cancel, final_db_status);
                     }

                     // 4. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                      let final_text = format!(
                         "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è ID:{} ({}) –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
                         operation_id_to_cancel, symbol
                      );
                      let _ = bot.edit_message_text(chat_id, bot_message_id_to_edit, final_text)
                                 .reply_markup(navigation::make_main_menu_keyboard()) // –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
                                 .await;
                 }
                 // –ï—Å–ª–∏ op_info –±—ã–ª None, –º—ã —É–∂–µ –≤—ã—à–ª–∏ —Ä–∞–Ω—å—à–µ

            } else {
                 error!("Failed to parse operation_id from cancel callback data: {}", op_id_str);
                 bot.answer_callback_query(q.id).text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –æ–ø–µ—Ä–∞—Ü–∏–∏.").await?;
            }
        } else {
             warn!("Invalid callback data format for cancel active operation: {}", data);
             bot.answer_callback_query(q.id).text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.").await?;
        }
    } else {
         warn!("CallbackQuery missing data or message in handle_cancel_active_op_callback");
         bot.answer_callback_query(q.id).await?;
    }
    Ok(())
}