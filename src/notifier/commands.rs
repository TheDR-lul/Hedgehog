// src/notifier/commands.rs

use crate::exchange::Exchange;
use crate::models::UnhedgeRequest;
// –î–æ–±–∞–≤–ª—è–µ–º UserState –∏ MessageId
use super::{Command, StateStorage, UserState};
use teloxide::prelude::*;
// –î–æ–±–∞–≤–ª—è–µ–º InlineKeyboardButton, InlineKeyboardMarkup, MessageId
use teloxide::types::{InlineKeyboardButton, InlineKeyboardMarkup, MessageId};
use teloxide::utils::command::BotCommands;

use tracing::{warn, error, info}; // –ò—Å–ø–æ–ª—å–∑—É–µ–º tracing –¥–ª—è –ª–æ–≥–æ–≤

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è "—á–∏—Å—Ç–∫–∏" —á–∞—Ç–∞ (–¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –∏–∑ messages.rs, –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏)
async fn cleanup_chat(bot: &Bot, chat_id: ChatId, user_msg_id: MessageId, bot_msg_id: Option<i32>) {
    if let Some(id_int) = bot_msg_id {
        if let Err(e) = bot.delete_message(chat_id, MessageId(id_int)).await {
            warn!("Failed to delete previous bot message {}: {}", id_int, e);
        }
    }
    if let Err(e) = bot.delete_message(chat_id, user_msg_id).await {
        warn!("Failed to delete user command message {}: {}", user_msg_id, e);
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
pub async fn handle_command<E>(
    bot: Bot,
    msg: Message,
    cmd: Command,
    mut exchange: E, // –î–µ–ª–∞–µ–º mut, —Ç.–∫. check_connection —Ç—Ä–µ–±—É–µ—Ç &mut
    state_storage: StateStorage,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    let message_id = msg.id; // ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–º–∞–Ω–¥–æ–π

    // --- –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ ---
    let mut previous_bot_message_id: Option<i32> = None;
    {
        let mut state_guard = state_storage
            .write()
            .expect("Failed to acquire write lock on state storage");
        // –ü–æ–ª—É—á–∞–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        if let Some(old_state) = state_guard.get(&chat_id) {
            previous_bot_message_id = match old_state {
                UserState::AwaitingAssetSelection { last_bot_message_id } => *last_bot_message_id,
                UserState::AwaitingSum { last_bot_message_id, .. } => *last_bot_message_id,
                UserState::AwaitingVolatility { last_bot_message_id, .. } => *last_bot_message_id,
                UserState::AwaitingUnhedgeQuantity { last_bot_message_id, .. } => *last_bot_message_id,
                UserState::None => None,
            };
        }
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ None
        if !matches!(state_guard.get(&chat_id), Some(UserState::None) | None) {
             info!("Resetting user state for {} due to new command: {:?}", chat_id, cmd);
             state_guard.insert(chat_id, UserState::None);
        }
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª–æ)
    cleanup_chat(&bot, chat_id, message_id, previous_bot_message_id).await;
    // --- –ö–æ–Ω–µ—Ü —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ—á–∏—Å—Ç–∫–∏ ---


    match cmd {
        Command::Help => {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            let kb = InlineKeyboardMarkup::new(vec![
                vec![
                    InlineKeyboardButton::callback("‚úÖ –°—Ç–∞—Ç—É—Å", "status"),
                    InlineKeyboardButton::callback("üíº –ë–∞–ª–∞–Ω—Å", "wallet"),
                ],
                vec![
                    InlineKeyboardButton::callback("ü™ô –ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã", "balance"),
                    InlineKeyboardButton::callback("‚öôÔ∏è –•–µ–¥–∂", "hedge"), // –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞
                    InlineKeyboardButton::callback("üõ† –†–∞—Å—Ö–µ–¥–∂", "unhedge"), // –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞
                    InlineKeyboardButton::callback("üìà Funding", "funding"),
                ],
            ]);
            bot.send_message(chat_id, Command::descriptions().to_string())
                .reply_markup(kb)
                .await?;
        }

        Command::Status => {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            match exchange.check_connection().await { // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞ mut exchange
                Ok(_) => {
                    bot.send_message(chat_id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ.").await?;
                }
                Err(e) => {
                     bot.send_message(chat_id, format!("‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∏—Ä–∂–µ: {}", e)).await?;
                }
            }
        }
        Command::Wallet => {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
             info!("Fetching wallet balance for chat_id: {}", chat_id);
            match exchange.get_all_balances().await {
                Ok(balances) => {
                    let mut text = "üíº –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n".to_string();
                    let mut found_assets = false;
                    let mut sorted_balances: Vec<_> = balances.into_iter().collect();
                    sorted_balances.sort_by_key(|(coin, _)| coin.clone());

                    for (coin, bal) in sorted_balances {
                        if bal.free > 1e-8 || bal.locked > 1e-8 {
                            text.push_str(&format!(
                                "‚Ä¢ {}: Ô∏èfree {:.4}, locked {:.4}\n",
                                coin, bal.free, bal.locked
                            ));
                            found_assets = true;
                        }
                    }
                    if !found_assets {
                        text = "‚ÑπÔ∏è –í–∞—à –∫–æ—à–µ–ª–µ–∫ –ø—É—Å—Ç.".to_string();
                    }
                    bot.send_message(chat_id, text).await?;
                }
                Err(e) => {
                    error!("Failed to fetch wallet balance for chat_id: {}: {}", chat_id, e);
                    bot.send_message(chat_id, format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {}", e)).await?;
                }
            }
        }
        Command::Balance(arg) => {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            let sym = arg.trim().to_uppercase();
            if sym.is_empty() {
                bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /balance <SYMBOL>").await?;
            } else {
                info!("Fetching balance for {} for chat_id: {}", sym, chat_id);
                match exchange.get_balance(&sym).await {
                    Ok(b) => {
                        bot.send_message(
                            chat_id,
                            format!("üí∞ {}: free {:.4}, locked {:.4}", sym, b.free, b.locked),
                        ).await?;
                    }
                    Err(e) => {
                         error!("Failed to fetch balance for {} for chat_id: {}: {}", sym, chat_id, e);
                        bot.send_message(chat_id, format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å {}: {}", sym, e)).await?;
                    }
                }
            }
        }

        Command::Hedge(arg) => {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            let symbol = arg.trim().to_uppercase();
            if symbol.is_empty() {
                bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /hedge <SYMBOL>\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–•–µ–¥–∂' –∏–∑ /help.").await?;
            } else {
                // –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–ª–æ–≥ –∑–∞–ø—Ä–æ—Å–∞ —Å—É–º–º—ã
                info!("Starting hedge dialog via command for chat_id: {}, symbol: {}", chat_id, symbol);
                let kb = InlineKeyboardMarkup::new(vec![vec![
                    InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_hedge"),
                ]]);
                let bot_msg = bot.send_message(
                    chat_id,
                    format!("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É USDT –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è {}:", symbol),
                )
                .reply_markup(kb)
                .await?;
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                {
                    let mut state = state_storage
                        .write()
                        .expect("Failed to acquire write lock on state storage");
                    state.insert(chat_id, UserState::AwaitingSum {
                        symbol: symbol.clone(),
                        last_bot_message_id: Some(bot_msg.id.0), // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                    });
                    info!("User state for {} set to AwaitingSum for symbol {}", chat_id, symbol);
                }
            }
        }

        Command::Unhedge(arg) => {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            let parts: Vec<_> = arg.split_whitespace().collect();
             if parts.len() != 2 {
                bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unhedge <QUANTITY> <SYMBOL>").await?;
                 return Ok(());
            }
            let quantity_res = parts[0].parse::<f64>();
            let sym = parts[1].to_uppercase();
            match quantity_res {
                Ok(quantity) if quantity > 0.0 => {
                    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –¥–∏–∞–ª–æ–≥–∞
                    info!("Processing /unhedge command for chat_id: {}, quantity: {}, symbol: {}", chat_id, quantity, sym);
                    // TODO: –í—ã–Ω–µ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã slippage, commission, max_wait –≤ –∫–æ–Ω—Ñ–∏–≥
                    let hedger = crate::hedger::Hedger::new(exchange.clone(), 0.005, 0.001, 30);
                    let waiting_msg = bot.send_message(chat_id, format!("‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} {}...", quantity, sym)).await?;
                    match hedger.run_unhedge(UnhedgeRequest {
                        sum: quantity, // –í UnhedgeRequest 'sum' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è quantity
                        symbol: sym.clone(),
                    }).await { // –ü–æ–∫–∞ –±–µ–∑ –∫–æ–ª–±—ç–∫–∞
                        Ok((sold, bought)) => {
                            info!("Unhedge successful for chat_id: {}. Sold spot: {}, Bought fut: {}", chat_id, sold, bought);
                            bot.edit_message_text(
                                waiting_msg.chat.id,
                                waiting_msg.id,
                                format!(
                                    "‚úÖ –†–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} {} –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n\nüü¢ –ü—Ä–æ–¥–∞–Ω–æ —Å–ø–æ—Ç–∞: {:.6}\nüî¥ –ö—É–ø–ª–µ–Ω–æ —Ñ—å—é—á–∞: {:.6}",
                                    quantity, sym, sold, bought,
                                )
                            ).await?;
                        }
                        Err(e) => {
                            error!("Unhedge failed for chat_id: {}: {}", chat_id, e);
                            bot.edit_message_text(
                                waiting_msg.chat.id,
                                waiting_msg.id,
                                format!("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è {}: {}", sym, e)
                            ).await?;
                        }
                    }
                }
                 _ => {
                    bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.").await?;
                }
            }
        }

         Command::Funding(arg) => {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            let parts: Vec<_> = arg.split_whitespace().collect();
            if parts.is_empty() {
                bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /funding <SYMBOL> [days]").await?;
            } else {
                let sym = parts[0].to_uppercase();
                let days_u32 = parts.get(1).and_then(|s| s.parse::<u32>().ok()).unwrap_or(30);
                if days_u32 == 0 {
                     bot.send_message(chat_id, "‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.").await?;
                     return Ok(());
                }
                let days_u16 = days_u32 as u16;

                info!("Fetching funding rate for {} ({} days) for chat_id: {}", sym, days_u16, chat_id);
                match exchange.get_funding_rate(&sym, days_u16).await {
                    Ok(rate) => {
                        bot.send_message(chat_id, format!(
                            "üìà –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è {} –∑–∞ {} –¥–Ω: {:.4}%",
                            sym, days_u16, rate * 100.0,
                        )).await?;
                    }
                    Err(e) => {
                         error!("Failed to fetch funding rate for {} for chat_id: {}: {}", sym, chat_id, e);
                        bot.send_message(chat_id, format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–≤–∫—É —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è {}: {}", sym, e)).await?;
                    }
                }
            }
        }
    }
    Ok(())
}
