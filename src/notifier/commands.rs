// src/notifier/commands.rs

use crate::config::Config;
use crate::exchange::Exchange;
// --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ---
use crate::hedger::Hedger;
use crate::storage::{Db, get_completed_unhedged_ops_for_symbol, HedgeOperation}; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º HedgeOperation
// --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
use super::{Command, StateStorage, UserState};
use teloxide::prelude::*;
use teloxide::types::{InlineKeyboardButton, InlineKeyboardMarkup, MessageId};
use teloxide::utils::command::BotCommands;
use tracing::{warn, error, info};
use chrono::{DateTime, Utc, TimeZone, LocalResult}; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º LocalResult

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è "—á–∏—Å—Ç–∫–∏" —á–∞—Ç–∞
async fn cleanup_chat(bot: &Bot, chat_id: ChatId, user_msg_id: MessageId, bot_msg_id: Option<i32>) {
    if let Some(id_int) = bot_msg_id {
        if let Err(e) = bot.delete_message(chat_id, MessageId(id_int)).await {
            warn!("Failed to delete previous bot message {}: {}", id_int, e);
        }
    }
    if let Err(e) = bot.delete_message(chat_id, user_msg_id).await {
        warn!("Failed to delete user command message {}: {}", user_msg_id, e);
    }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
pub async fn handle_command<E>(
    bot: Bot,
    msg: Message,
    cmd: Command,
    mut exchange: E, // –°–¥–µ–ª–∞–µ–º mut –¥–ª—è check_connection
    state_storage: StateStorage,
    cfg: Config,
    db: &Db,
) -> anyhow::Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    let message_id = msg.id;

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
    let mut previous_bot_message_id: Option<i32> = None;
    {
        let mut state_guard = state_storage
            .write()
            .expect("Failed to acquire write lock on state storage");
        if let Some(old_state) = state_guard.get(&chat_id) {
             // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            previous_bot_message_id = match old_state {
                UserState::AwaitingAssetSelection { last_bot_message_id, .. } => *last_bot_message_id,
                UserState::AwaitingSum { last_bot_message_id, .. } => *last_bot_message_id,
                UserState::AwaitingVolatility { last_bot_message_id, .. } => *last_bot_message_id,
                UserState::AwaitingUnhedgeSelection { last_bot_message_id, .. } => *last_bot_message_id, // –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                UserState::None => None,
            };
        }
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ None
        if !matches!(state_guard.get(&chat_id), Some(UserState::None) | None) {
             info!("Resetting user state for {} due to new command: {:?}", chat_id, cmd);
             state_guard.insert(chat_id, UserState::None);
        }
    }
    cleanup_chat(&bot, chat_id, message_id, previous_bot_message_id).await;


    match cmd {
        Command::Help => {
            let kb = InlineKeyboardMarkup::new(vec![
                vec![
                    InlineKeyboardButton::callback("‚úÖ –°—Ç–∞—Ç—É—Å", "status"),
                    InlineKeyboardButton::callback("üíº –ë–∞–ª–∞–Ω—Å", "wallet"),
                ],
                vec![
                    InlineKeyboardButton::callback("ü™ô –ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã", "balance"),
                    InlineKeyboardButton::callback("‚öôÔ∏è –•–µ–¥–∂", "hedge"),
                    InlineKeyboardButton::callback("üõ† –†–∞—Å—Ö–µ–¥–∂", "unhedge"), // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∂–µ—Ç –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞
                    InlineKeyboardButton::callback("üìà Funding", "funding"),
                ],
            ]);
            bot.send_message(chat_id, Command::descriptions().to_string())
                .reply_markup(kb)
                .await?;
        }
        Command::Status => {
            match exchange.check_connection().await {
                Ok(_) => { bot.send_message(chat_id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –±–∏—Ä–∂–µ.").await?; }
                Err(e) => { bot.send_message(chat_id, format!("‚ö†Ô∏è –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∏—Ä–∂–µ: {}", e)).await?; }
            }
        }
        Command::Wallet => {
             info!("Fetching wallet balance for chat_id: {}", chat_id);
            match exchange.get_all_balances().await {
                Ok(balances) => {
                    let mut text = "üíº –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n".to_string();
                    let mut found_assets = false;
                    let mut sorted_balances: Vec<_> = balances.into_iter().collect();
                    sorted_balances.sort_by_key(|(coin, _)| coin.clone());
                    for (coin, bal) in sorted_balances {
                        use crate::hedger::ORDER_FILL_TOLERANCE;
                        if bal.free > ORDER_FILL_TOLERANCE || bal.locked > ORDER_FILL_TOLERANCE {
                            text.push_str(&format!( "‚Ä¢ {}: Ô∏èfree {:.8}, locked {:.8}\n", coin, bal.free, bal.locked )); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ .8
                            found_assets = true;
                        }
                    }
                    if !found_assets { text = "‚ÑπÔ∏è –í–∞—à –∫–æ—à–µ–ª–µ–∫ –ø—É—Å—Ç.".to_string(); }
                    bot.send_message(chat_id, text).await?;
                }
                Err(e) => {
                    error!("Failed to fetch wallet balance for chat_id: {}: {}", chat_id, e);
                    bot.send_message(chat_id, format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {}", e)).await?;
                }
            }
        }
        Command::Balance(arg) => {
            let sym = arg.trim().to_uppercase();
            if sym.is_empty() { bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /balance <SYMBOL>").await?; }
            else {
                info!("Fetching balance for {} for chat_id: {}", sym, chat_id);
                match exchange.get_balance(&sym).await {
                    Ok(b) => { bot.send_message( chat_id, format!("üí∞ {}: free {:.8}, locked {:.8}", sym, b.free, b.locked), ).await?; } // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ .8
                    Err(e) => { error!("Failed to fetch balance for {} for chat_id: {}: {}", sym, chat_id, e); bot.send_message(chat_id, format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å {}: {}", sym, e)).await?; }
                }
            }
        }
        Command::Hedge(arg) => {
            let symbol = arg.trim().to_uppercase();
            if symbol.is_empty() { bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /hedge <SYMBOL>\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–•–µ–¥–∂' –∏–∑ /help.").await?; }
            else {
                info!("Starting hedge dialog via command for chat_id: {}, symbol: {}", chat_id, symbol);
                let kb = InlineKeyboardMarkup::new(vec![vec![InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_hedge"),]]);
                let bot_msg = bot.send_message( chat_id, format!("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {} –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è {}:", cfg.quote_currency, symbol), ).reply_markup(kb).await?;
                { let mut state = state_storage.write().expect("Lock failed"); state.insert(chat_id, UserState::AwaitingSum { symbol: symbol.clone(), last_bot_message_id: Some(bot_msg.id.0), }); info!("User state for {} set to AwaitingSum for symbol {}", chat_id, symbol); }
            }
        }

        // --- –û–ë–†–ê–ë–û–¢–ö–ê /unhedge <SYMBOL> ---
        Command::Unhedge(arg) => {
            let symbol = arg.trim().to_uppercase();
            if symbol.is_empty() {
                bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unhedge <SYMBOL>\n(–ù–∞–ø—Ä–∏–º–µ—Ä: /unhedge BTC)").await?;
                return Ok(());
            }

            info!("Looking for completed hedges for symbol {} for chat_id {}", symbol, chat_id);

            match get_completed_unhedged_ops_for_symbol(db, chat_id.0, &symbol).await {
                Ok(operations) => {
                    if operations.is_empty() {
                        bot.send_message(chat_id, format!("‚ÑπÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {}, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å.", symbol)).await?;
                    } else if operations.len() == 1 {
                        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
                        let op_to_unhedge = operations.into_iter().next().unwrap();
                        let op_id = op_to_unhedge.id;
                        info!("Found single operation to unhedge (op_id: {}). Starting unhedge directly.", op_id);

                        let waiting_msg = bot.send_message(chat_id, format!("‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ID:{} ({})...", op_id, symbol)).await?;

                        // –ó–∞–ø—É—Å–∫–∞–µ–º run_unhedge –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
                        let hedger = Hedger::new(exchange.clone(), cfg.clone());
                        let bot_clone = bot.clone();
                        let waiting_msg_id = waiting_msg.id;
                        let symbol_clone = symbol.clone();
                        let db_clone = db.clone();

                        tokio::spawn(async move {
                            match hedger.run_unhedge(op_to_unhedge, &db_clone).await {
                                Ok((sold, bought)) => {
                                    info!("Direct unhedge successful for op_id: {}. Sold spot: {}, Bought fut: {}", op_id, sold, bought);
                                    let _ = bot_clone.edit_message_text(
                                        chat_id,
                                        waiting_msg_id,
                                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ sold/bought –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                                        format!(
                                            "‚úÖ –†–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} (–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–∏ ID:{}) –∑–∞–≤–µ—Ä—à–µ–Ω–æ:\n\nüü¢ –ü—Ä–æ–¥–∞–Ω–æ —Å–ø–æ—Ç–∞: {:.8}\nüî¥ –ö—É–ø–ª–µ–Ω–æ —Ñ—å—é—á–∞: {:.8}",
                                            symbol_clone, op_id, sold, bought,
                                        ),
                                    )
                                    .reply_markup(InlineKeyboardMarkup::new(Vec::<Vec<InlineKeyboardButton>>::new()))
                                    .await;
                                }
                                Err(e) => {
                                    error!("Direct unhedge failed for op_id: {}: {}", op_id, e);
                                    let _ = bot_clone.edit_message_text(
                                        chat_id,
                                        waiting_msg_id,
                                        format!("‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ ID:{}: {}", op_id, e)
                                     )
                                     .reply_markup(InlineKeyboardMarkup::new(Vec::<Vec<InlineKeyboardButton>>::new()))
                                     .await;
                                }
                            }
                        });
                    } else {
                        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
                        info!("Found {} operations to unhedge for {}. Prompting user selection.", operations.len(), symbol);
                        let mut buttons: Vec<Vec<InlineKeyboardButton>> = Vec::new();
                        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–≤–µ—Ä—Ö—É)
                        let mut sorted_ops = operations.clone(); // –ö–ª–æ–Ω–∏—Ä—É–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
                        sorted_ops.sort_by_key(|op| std::cmp::Reverse(op.id));

                        for op in &sorted_ops { // –ò—Å–ø–æ–ª—å–∑—É–µ–º sorted_ops –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            // --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ LocalResult –æ—Ç timestamp_opt ---
                            let timestamp_dt = match Utc.timestamp_opt(op.start_timestamp, 0) {
                                LocalResult::Single(dt) => dt, // –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞—Ç—É
                                _ => { // –ï—Å–ª–∏ None –∏–ª–∏ Ambiguous, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                                     warn!("Could not get unique timestamp for op_id {}. Using current time.", op.id);
                                     Utc::now()
                                }
                            };
                            // --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---
                            let date_str = timestamp_dt.format("%Y-%m-%d %H:%M").to_string();
                            // –ò—Å–ø–æ–ª—å–∑—É–µ–º target_futures_qty (–Ω–µ—Ç—Ç–æ), —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Ç–æ—á–Ω–µ–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            let label = format!("ID:{} {:.6} {} ({})", op.id, op.target_futures_qty, op.base_symbol, date_str);
                            let callback_data = format!("unhedge_select_{}", op.id);
                            buttons.push(vec![InlineKeyboardButton::callback(label, callback_data)]);
                        }
                        buttons.push(vec![InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_hedge")]); // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã

                        let kb = InlineKeyboardMarkup::new(buttons);
                        let bot_msg = bot.send_message(chat_id, format!("–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {}. –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫—É—é —Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å:", symbol))
                            .reply_markup(kb)
                            .await?;

                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞
                        {
                            let mut state = state_storage.write().expect("Failed to lock state storage");
                            state.insert(chat_id, UserState::AwaitingUnhedgeSelection {
                                symbol: symbol.clone(),
                                operations, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π (–Ω–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π) –≤–µ–∫—Ç–æ—Ä
                                last_bot_message_id: Some(bot_msg.id.0),
                            });
                            info!("User state for {} set to AwaitingUnhedgeSelection for symbol {}", chat_id, symbol);
                        }
                    }
                }
                Err(e) => {
                    error!("Failed to query hedge operations for {}: {}", symbol, e);
                    bot.send_message(chat_id, format!("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î: {}", e)).await?;
                }
            }
        }
        // --- –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò /unhedge ---

         Command::Funding(arg) => {
            let parts: Vec<_> = arg.split_whitespace().collect();
            if parts.is_empty() { bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /funding <SYMBOL> [days]").await?; }
            else {
                let sym = parts[0].to_uppercase();
                let days_u32 = parts.get(1).and_then(|s| s.parse::<u32>().ok()).unwrap_or(30);
                if days_u32 == 0 { bot.send_message(chat_id, "‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.").await?; return Ok(()); }
                let days_u16 = days_u32 as u16;
                info!("Fetching funding rate for {} ({} days) for chat_id: {}", sym, days_u16, chat_id);
                match exchange.get_funding_rate(&sym, days_u16).await {
                    Ok(rate) => { bot.send_message(chat_id, format!("üìà –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è {} –∑–∞ {} –¥–Ω: {:.4}%", sym, days_u16, rate * 100.0)).await?; }
                    Err(e) => { error!("Failed to fetch funding rate for {} for chat_id: {}: {}", sym, chat_id, e); bot.send_message(chat_id, format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–≤–∫—É —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è {}: {}", sym, e)).await?; }
                }
            }
        }
    }
    Ok(())
}