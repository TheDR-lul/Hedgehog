// src/notifier/hedge_flow_logic/ui.rs

use super::super::{StateStorage, UserState, callback_data}; // –ò–º–ø–æ—Ä—Ç –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ notifier
use crate::config::Config;
use crate::exchange::Exchange;
use crate::storage::Db;
use crate::notifier::wallet_info; // –î–ª—è get_formatted_balances
use std::sync::Arc;
use teloxide::prelude::*;
use teloxide::types::{
    InlineKeyboardButton, InlineKeyboardMarkup, MessageId, ChatId,
};
use tracing::{info, error};
use anyhow::Result;

// –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ö–µ–¥–∂–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
pub(super) fn make_hedge_confirmation_keyboard() -> InlineKeyboardMarkup {
    InlineKeyboardMarkup::new(vec![
        vec![
            InlineKeyboardButton::callback(
                "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Sequential",
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π PREFIX_HEDGE_CONFIRM, –Ω–æ —Å –Ω–æ–≤—ã–º payload "seq"
                format!("{}{}", callback_data::PREFIX_HEDGE_CONFIRM, "seq")
            ),
        ],
        vec![
            InlineKeyboardButton::callback(
                "üõ∞Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å WebSocket",
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π PREFIX_HEDGE_CONFIRM, –Ω–æ —Å –Ω–æ–≤—ã–º payload "ws"
                format!("{}{}", callback_data::PREFIX_HEDGE_CONFIRM, "ws")
            ),
        ],
        vec![
            InlineKeyboardButton::callback("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data::CANCEL_DIALOG),
        ],
    ])
}

// –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ–Ω–æ–π
pub(super) fn make_dialog_keyboard() -> InlineKeyboardMarkup {
     InlineKeyboardMarkup::new(vec![vec![
        InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", callback_data::CANCEL_DIALOG),
    ]])
}

// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–∞ –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è
pub(super) async fn prompt_asset_selection<E>(
    bot: &Bot, // –ü—Ä–∏–Ω–∏–º–∞–µ–º –±–æ—Ç –ø–æ —Å—Å—ã–ª–∫–µ
    chat_id: ChatId,
    state_storage: &StateStorage, // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ
    exchange: Arc<E>,
    cfg: Arc<Config>,
    _db: Arc<Db>,
    message_id_to_edit: Option<MessageId>,
) -> Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    info!("Prompting asset selection for hedge, chat_id: {}", chat_id);
    let loading_text = "‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤...";
    let mut bot_message_id = message_id_to_edit;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    if let Some(msg_id) = bot_message_id {
        let kb = InlineKeyboardMarkup::new(vec![vec![
             InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::BACK_TO_MAIN)
        ]]);
        let _ = bot.edit_message_text(chat_id, msg_id, loading_text).reply_markup(kb).await;
    } else {
        let sent_msg = bot.send_message(chat_id, loading_text).await?;
        bot_message_id = Some(sent_msg.id);
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    match wallet_info::get_formatted_balances(exchange.as_ref(), &cfg.quote_currency, false).await {
        Ok((_, asset_data)) => {
            let mut buttons: Vec<Vec<InlineKeyboardButton>> = Vec::new();
            let mut assets_found = false;

            for (coin, free, locked) in asset_data {
                if coin != cfg.quote_currency {
                     assets_found = true;
                     let callback_data_asset = format!("{}{}", callback_data::PREFIX_HEDGE_ASSET, coin);
                     buttons.push(vec![InlineKeyboardButton::callback(
                         format!("üíº {} (free: {:.6}, locked: {:.6})", coin, free, locked),
                         callback_data_asset,
                     )]);
                }
            }

            let mut text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è:".to_string();
            if !assets_found {
                text = format!("‚ÑπÔ∏è –í –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ (–∫—Ä–æ–º–µ {}), –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è.\n", cfg.quote_currency);
            }
            text.push_str("\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC) —Å–æ–æ–±—â–µ–Ω–∏–µ–º.");
            buttons.push(vec![InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::BACK_TO_MAIN)]);
            let keyboard = InlineKeyboardMarkup::new(buttons);

            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º
            if let Some(msg_id) = bot_message_id {
                if let Err(e) = bot.edit_message_text(chat_id, msg_id, &text).reply_markup(keyboard.clone()).await {
                   error!("Failed to edit message for asset selection: {}. Sending new.", e);
                   bot_message_id = Some(bot.send_message(chat_id, text).reply_markup(keyboard).await?.id);
                }
            } else {
                 bot_message_id = Some(bot.send_message(chat_id, text).reply_markup(keyboard).await?.id);
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            {
                let mut state_guard = state_storage.write().await;
                state_guard.insert(chat_id, UserState::AwaitingHedgeAssetSelection {
                    last_bot_message_id: bot_message_id.map(|id| id.0),
                });
                info!("User state for {} set to AwaitingHedgeAssetSelection", chat_id);
            }
        }
        Err(e) => {
             error!("Failed to get balances for asset selection: {}", e);
             let error_text = format!("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤ –∏–∑ –∫–æ—à–µ–ª—å–∫–∞: {}", e);
             let kb = InlineKeyboardMarkup::new(vec![vec![
                 InlineKeyboardButton::callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data::BACK_TO_MAIN)
             ]]);
             if let Some(msg_id) = bot_message_id {
                 let _ = bot.edit_message_text(chat_id, msg_id, error_text).reply_markup(kb).await;
             } else {
                 let _ = bot.send_message(chat_id, error_text).reply_markup(kb).await;
             }
              { state_storage.write().await.insert(chat_id, UserState::None); }
             return Err(e.into());
        }
    }
    Ok(())
}