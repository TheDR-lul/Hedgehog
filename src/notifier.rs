use anyhow::Result;
use teloxide::{
    prelude::*,
    types::{InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, ChatId},
    utils::command::BotCommands,
};
use crate::exchange::Exchange;
use crate::hedger::Hedger;
use crate::models::{HedgeRequest, UnhedgeRequest};
use std::sync::Arc;
use tokio::sync::RwLock;
use std::collections::HashMap;

/// –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")]
pub enum Command {
    #[command(description = "–ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", aliases = ["help", "?"])]
    Help,
    #[command(description = "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")]
    Status,
    #[command(description = "—Å–ø–∏—Å–æ–∫ –≤—Å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞: /wallet")]
    Wallet,
    #[command(description = "–±–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã: /balance <symbol>")]
    Balance(String),
    #[command(description = "–∑–∞—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å: /hedge <sum> <symbol> <volatility %>")]
    Hedge(String),
    #[command(description = "—Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å: /unhedge <sum> <symbol>")]
    Unhedge(String),
    #[command(description = "—Å—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è: /funding <symbol> [days]")]
    Funding(String),
}

/// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#[derive(Debug, Clone)]
pub enum UserState {
    AwaitingAssetSelection { last_bot_message_id: Option<i32> }, // –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–∫—Ç–∏–≤–∞
    AwaitingSum { symbol: String, last_bot_message_id: Option<i32> }, // –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    AwaitingVolatility { symbol: String, sum: f64, last_bot_message_id: Option<i32> }, // –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    None, // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
}
// –¢–∏–ø –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
pub type StateStorage = Arc<RwLock<HashMap<ChatId, UserState>>>;

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
/// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
pub async fn handle_command<E>(
    bot: Bot,
    msg: Message,
    cmd: Command,
    exchange: E,
    state_storage: StateStorage,
) -> Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    match cmd {
        Command::Help => {
            let kb = InlineKeyboardMarkup::new(vec![
                vec![
                    InlineKeyboardButton::callback("‚úÖ –°—Ç–∞—Ç—É—Å", "status"),
                    InlineKeyboardButton::callback("üíº –ë–∞–ª–∞–Ω—Å", "wallet"),
                ],
                vec![
                    InlineKeyboardButton::callback("ü™ô –ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã", "balance"),
                    InlineKeyboardButton::callback("‚öôÔ∏è –•–µ–¥–∂", "hedge"),
                    InlineKeyboardButton::callback("üõ† –†–∞—Å—Ö–µ–¥–∂", "unhedge"),
                    InlineKeyboardButton::callback("üìà Funding", "funding"),
                ],
            ]);
            bot.send_message(chat_id, Command::descriptions().to_string())
                .reply_markup(kb)
                .await?;
        }
        Command::Status => {
            bot.send_message(chat_id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –±–∏—Ä–∂–µ").await?;
        }
        Command::Wallet => {
            let list = exchange.get_all_balances().await?;
            let mut text = "üíº –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n".to_string();
            for (c, b) in list.into_iter() {
                if b.free > 0.0 || b.locked > 0.0 {
                    text.push_str(&format!("‚Ä¢ {}: free={:.4}, locked={:.4}\n", c, b.free, b.locked));
                }
            }
            bot.send_message(chat_id, text).await?;
        }
        Command::Balance(arg) => {
            let sym = arg.trim().to_uppercase();
            if sym.is_empty() {
                bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /balance <symbol>").await?;
            } else {
                match exchange.get_balance(&sym).await {
                    Ok(b) => {
                        bot.send_message(
                            chat_id,
                            format!("üí∞ {}: free={:.4}, locked={:.4}", sym, b.free, b.locked),
                        )
                        .await?;
                    }
                    Err(_) => {
                        bot.send_message(chat_id, format!("‚ùå –ë–∞–ª–∞–Ω—Å–∞ {} –Ω–µ—Ç", sym))
                            .await?;
                    }
                }
            }
        }
        Command::Hedge(arg) => {
            let parts: Vec<_> = arg.split_whitespace().collect();
            if parts.len() != 3 {
                bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /hedge <sum> <symbol> <volatility %>")
                    .await?;
            } else {
                let sum: f64 = parts[0].parse().unwrap_or(0.0);
                let sym = parts[1].to_uppercase();
                let vol = parts[2].trim_end_matches('%').parse::<f64>().unwrap_or(0.0) / 100.0;
                do_hedge(&bot, chat_id, format!("{} {} {:.2}", sum, sym, vol), &exchange).await?;
            }
        }
        Command::Unhedge(arg) => {
            let parts: Vec<_> = arg.split_whitespace().collect();
            if parts.len() != 2 {
                bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unhedge <sum> <symbol>").await?;
            } else {
                let sum: f64 = parts[0].parse().unwrap_or(0.0);
                let sym = parts[1].to_uppercase();
                do_unhedge(&bot, chat_id, format!("{} {}", sum, sym), &exchange).await?;
            }
        }
        Command::Funding(arg) => {
            let parts: Vec<_> = arg.split_whitespace().collect();
            if parts.is_empty() {
                bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /funding <symbol> [days]").await?;
            } else {
                let sym = parts[0].to_uppercase();
                let days = parts.get(1).and_then(|d| d.parse().ok()).unwrap_or(30);
                match exchange.get_funding_rate(&sym, days).await {
                    Ok(r) => {
                        bot.send_message(
                            chat_id,
                            format!(
                                "–°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è {} –∑–∞ {} –¥–Ω: {:.4}%",
                                sym,
                                days,
                                r * 100.0
                            ),
                        )
                        .await?;
                    }
                    Err(e) => {
                        bot.send_message(chat_id, format!("‚ùå –û—à–∏–±–∫–∞ funding: {}", e))
                            .await?;
                    }
                }
            }
        }
    }
    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline‚Äëcallback —Å–æ–±—ã—Ç–∏–π
pub async fn handle_callback<E>(
    bot: Bot,
    q: CallbackQuery,
    exchange: E,
    state_storage: StateStorage,
) -> Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    if let Some(data) = q.data {
        let message = q.message.as_ref().expect("Callback query without message");
        let chat_id = message.chat().id;
        let message_id  = message.id();

        // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let mut state = state_storage.write().await;

        match data.as_str() {
            "status" => {
                bot.edit_message_text(chat_id, message_id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –±–∏—Ä–∂–µ")
                    .await?;
            }
            "wallet" => {
                let balances = exchange.get_all_balances().await?;
                let mut text = "üíº –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞:\n".to_string();
                for (coin, bal) in balances {
                    if bal.free > 0.0 || bal.locked > 0.0 {
                        text.push_str(&format!(
                            "‚Ä¢ {}: free={:.4}, locked={:.4}\n",
                            coin, bal.free, bal.locked
                        ));
                    }
                }
                bot.edit_message_text(chat_id, message_id, text).await?;
            }
            "balance" => {
                bot.edit_message_text(chat_id, message_id, "–í–≤–µ–¥–∏—Ç–µ: /balance <symbol>")
                    .await?;
            }
            "hedge" | "unhedge" => {
                let action = if data == "hedge" { "—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è" } else { "—Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è" };
                let list = exchange.get_all_balances().await?;
                let mut buttons = vec![];

                for (coin, bal) in list {
                    if bal.free > 0.0 || bal.locked > 0.0 {
                        buttons.push(vec![
                            InlineKeyboardButton::callback(
                                format!("ü™ô {} (free: {:.4}, locked: {:.4})", coin, bal.free, bal.locked),
                                format!("{}_{}", data, coin),
                            ),
                        ]);
                    }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
                buttons.push(vec![
                    InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_hedge"),
                ]);

                let kb = InlineKeyboardMarkup::new(buttons);
                bot.edit_message_text(
                    chat_id,
                    message_id,
                    format!("–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤ –¥–ª—è {}:", action),
                )
                .reply_markup(kb)
                .await?;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                state.insert(
                    chat_id,
                    UserState::AwaitingAssetSelection {
                        last_bot_message_id: Some(message_id.0),
                    },
                );
            }
            "cancel_hedge" => {
                state.insert(chat_id, UserState::None);

                let kb = InlineKeyboardMarkup::new(vec![
                    vec![
                        InlineKeyboardButton::callback("‚úÖ –°—Ç–∞—Ç—É—Å", "status"),
                        InlineKeyboardButton::callback("üíº –ë–∞–ª–∞–Ω—Å", "wallet"),
                    ],
                    vec![
                        InlineKeyboardButton::callback("ü™ô –ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç—ã", "balance"),
                        InlineKeyboardButton::callback("‚öôÔ∏è –•–µ–¥–∂", "hedge"),
                        InlineKeyboardButton::callback("üõ† –†–∞—Å—Ö–µ–¥–∂", "unhedge"),
                        InlineKeyboardButton::callback("üìà Funding", "funding"),
                    ],
                ]);

                bot.edit_message_text(chat_id, message_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                    .reply_markup(kb)
                    .await?;
            }
            _ if data.starts_with("hedge_") || data.starts_with("unhedge_") => {
                let action = if data.starts_with("hedge_") { "—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è" } else { "—Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è" };
                let sym = data.split('_').nth(1).unwrap_or_default();

                state.insert(
                    chat_id,
                    UserState::AwaitingSum {
                        symbol: sym.to_string(),
                        last_bot_message_id: Some(message_id.0),
                    },
                );

                let kb = InlineKeyboardMarkup::new(vec![
                    vec![InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_hedge")],
                ]);

                bot.edit_message_text(
                    chat_id,
                    message_id,
                    format!("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è {} {}:", action, sym),
                )
                .reply_markup(kb)
                .await?;
            }
            _ => {}
        }

        // –û—Ç–≤–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
        bot.answer_callback_query(q.id).await?;
    }

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
pub async fn handle_message<E>(
    bot: Bot,
    msg: Message,
    state_storage: StateStorage,
    exchange: E,
) -> Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;
    let message_id = msg.id;
    let text = msg.text().unwrap_or("").trim();
    let mut state = state_storage.write().await;

    if let Some(user_state) = state.get_mut(&chat_id) {
        match user_state.clone() {
            UserState::AwaitingSum { symbol, last_bot_message_id } => {
                if let Ok(sum) = text.parse::<f64>() {
                    *user_state = UserState::AwaitingVolatility {
                        symbol: symbol.clone(),
                        sum,
                        last_bot_message_id: None,
                    };

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
                    let kb = InlineKeyboardMarkup::new(vec![
                        vec![InlineKeyboardButton::callback("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_hedge")],
                    ]);
                    let sent_message = bot.send_message(
                        chat_id,
                        format!("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è {} (%):", symbol),
                    )
                    .reply_markup(kb)
                    .await?;

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
                    if let Some(user_state) = state.get_mut(&chat_id) {
                        if let UserState::AwaitingVolatility { last_bot_message_id, .. } = user_state {
                            *last_bot_message_id = Some(sent_message.id.0);
                        }
                    }

                    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    bot.delete_message(chat_id, message_id).await?;
                } else {
                    bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
                        .await?;
                }
            }
            UserState::AwaitingVolatility { symbol, sum, last_bot_message_id } => {
                if let Ok(vol) = text.trim_end_matches('%').parse::<f64>() {
                    let vol = vol / 100.0;
                    *user_state = UserState::None; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

                    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
                    if let Some(last_bot_message_id) = last_bot_message_id {
                        bot.edit_message_text(
                            chat_id,
                            teloxide::types::MessageId(last_bot_message_id), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º i32 –≤ MessageId
                            format!("–•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} USDT {} –ø—Ä–∏ V={:.1}%", sum, symbol, vol * 100.0),
                        )
                        .await?;
                    }

                    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ
                    do_hedge(&bot, chat_id, format!("{} {} {:.2}", sum, symbol, vol), &exchange).await?;

                    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    bot.delete_message(chat_id, message_id).await?;
                } else {
                    bot.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (%).")
                        .await?;
                }
            }
            _ => {}
        }
    } else {
        bot.send_message(chat_id, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.").await?;
    }
    Ok(())
}

async fn do_hedge<E>(
    bot: &Bot,
    chat_id: ChatId,
    args: String,
    exchange: &E,
) -> Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let parts: Vec<_> = args.split_whitespace().collect();
    if parts.len() != 3 {
        bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /hedge <sum> <symbol> <volatility %>")
            .await?;
        return Ok(());
    }
    let sum: f64 = parts[0].parse().unwrap_or(0.0);
    let sym = parts[1].to_uppercase();
    let vol = parts[2].trim_end_matches('%').parse::<f64>().unwrap_or(0.0) / 100.0;
    // slippage 0.5%, commission 0.1%
    let hedger = Hedger::new(exchange.clone(), 0.005, 0.001);
    match hedger.run_hedge(HedgeRequest { sum, symbol: sym.clone(), volatility: vol }).await {
        Ok((spot, fut)) => {
            bot.send_message(
                chat_id,
                format!(
                    "–•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} USDT {} –ø—Ä–∏ V={:.1}%:
‚ñ∏ –°–ø–æ—Ç {:+.4}
‚ñ∏ –§—å—é—á–µ—Ä—Å {:+.4}",
                    sum,
                    sym,
                    vol * 100.0,
                    spot,
                    fut,
                ),
            )
            .await?;
        }
        Err(e) => {
            bot.send_message(chat_id, format!("‚ùå –û—à–∏–±–∫–∞: {}", e)).await?;
        }
    }
    Ok(())
}

async fn do_unhedge<E>(
    bot: &Bot,
    chat_id: ChatId,
    args: String,
    exchange: &E, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π exchange
) -> Result<()> 
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let parts: Vec<_> = args.split_whitespace().collect();
    if parts.len() != 2 {
        bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unhedge <sum> <symbol>").await?;
        return Ok(());
    }
    let sum: f64 = parts[0].parse().unwrap_or(0.0);
    let sym = parts[1].to_uppercase();
    // slippage 0.5%, commission 0.1%
    let hedger = Hedger::new(exchange.clone(), 0.005, 0.001); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π exchange
    match hedger.run_unhedge(UnhedgeRequest { sum, symbol: sym.clone() }).await {
        Ok((sold, bought)) => {
            bot.send_message(
                chat_id,
                format!(
                    "–†–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {} USDT {}:
‚ñ∏ –ü—Ä–æ–¥–∞–Ω–æ —Å–ø–æ—Ç–∞ {:+.4}
‚ñ∏ –ö—É–ø–ª–µ–Ω–æ —Ñ—å—é—á–∞ {:+.4}",
                    sum,
                    sym,
                    sold,
                    bought
                ),
            )
            .await?;
        }
        Err(e) => {
            bot.send_message(chat_id, format!("‚ùå –û—à–∏–±–∫–∞ unhedge: {}", e)).await?;
        }
    }
    Ok(())
}