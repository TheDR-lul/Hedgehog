use anyhow::Result;
use teloxide::{prelude::*, utils::command::BotCommands};

use crate::exchange::Exchange;
use crate::hedger::Hedger;
use crate::models::{HedgeRequest, UnhedgeRequest};

/// –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
#[derive(BotCommands, Clone)]
#[command(description = "–•–µ–¥–∂‚Äë–±–æ—Ç –∫–æ–º–∞–Ω–¥—ã:")]
pub enum Command {
    /// –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ API
    #[command(description = "–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")]
    Status,

    /// –ó–∞—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é: /hedge 1000 MNT 60
    #[command(description = "–∑–∞—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å: /hedge <sum> <symbol> <volatility %>")]
    Hedge(String),

    /// –†–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é: /unhedge 500 MNT
    #[command(description = "—Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å: /unhedge <sum> <symbol>")]
    Unhedge(String),
}

/// –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
pub async fn handler<E>(
    bot: Bot,
    msg: Message,
    cmd: Command,
    exchange: E,
) -> Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;

    match cmd {
        Command::Status => {
            bot.send_message(chat_id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –±–∏—Ä–∂–µ")
                .await?;
        }

        Command::Hedge(args) => {
            // /hedge <sum> <symbol> <vol%>
            let parts: Vec<&str> = args.split_whitespace().collect();
            if parts.len() != 3 {
                bot.send_message(
                    chat_id,
                    "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /hedge <sum> <symbol> <volatility %>",
                )
                .await?;
                return Ok(());
            }

            // –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            let sum        : f64    = parts[0].parse().unwrap_or(0.0);
            let symbol     : String = parts[1].to_uppercase();
            let volatility : f64    = parts[2]
                .trim_end_matches('%')
                .parse::<f64>()
                .unwrap_or(0.0) / 100.0;

            // –°–æ–∑–¥–∞—ë–º Hedger –Ω–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∏—Ä–∂–µ
            let hedger = Hedger::new(exchange.clone());

            // –†–∞—Å—á—ë—Ç
            match hedger
                .run_hedge(HedgeRequest { sum, symbol: symbol.clone(), volatility })
                .await
            {
                Ok((spot, fut)) => {
                    bot.send_message(
                        chat_id,
                        format!(
                            "–•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {sum}¬†USDT {symbol} –ø—Ä–∏ V={:.2}%:\n\
                             ‚ñ∏ –°–ø–æ—Ç‚ÄÉ‚ÄÉ{spot:.4}\n‚ñ∏ –§—å—é—á–µ—Ä—Å {fut:.4}",
                            volatility * 100.0
                        ),
                    )
                    .await?;
                }
                Err(e) => {
                    bot.send_message(chat_id, format!("‚ùå –û—à–∏–±–∫–∞ —Ö–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"))
                        .await?;
                }
            }
        }

        Command::Unhedge(args) => {
            // /unhedge <sum> <symbol>
            let parts: Vec<&str> = args.split_whitespace().collect();
            if parts.len() != 2 {
                bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unhedge <sum> <symbol>")
                    .await?;
                return Ok(());
            }

            let sum    : f64    = parts[0].parse().unwrap_or(0.0);
            let symbol : String = parts[1].to_uppercase();

            // –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –±—É–¥—É—â–µ–µ (UnhedgeRequest –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω)
            let _req = UnhedgeRequest { sum, symbol };

            bot.send_message(
                chat_id,
                "üöß –ö–æ–º–∞–Ω–¥–∞ /unhedge –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ ‚Äî —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏",
            )
            .await?;
        }
    }

    Ok(())
}