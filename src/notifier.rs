// src/notifier.rs

use anyhow::Result;
use teloxide::{
    prelude::*,
    types::{InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery},
    utils::command::BotCommands,
};
use crate::exchange::Exchange;
use crate::hedger::Hedger;
use crate::models::{HedgeRequest, UnhedgeRequest};

/// –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
#[derive(BotCommands, Clone)]
#[command(rename_rule = "lowercase", description = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")]
pub enum Command {
    #[command(description = "–ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", aliases = ["help", "?"])]
    Help,
    #[command(description = "–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")]
    Status,
    #[command(description = "–∑–∞—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å: /hedge <sum> <symbol> <volatility %>")]
    Hedge(String),
    #[command(description = "—Ä–∞—Å—Ö–µ–¥–∂–∏—Ä–æ–≤–∞—Ç—å: /unhedge <sum> <symbol>")]
    Unhedge(String),
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
pub async fn handle_command<E>(
    bot: Bot,
    msg: Message,
    cmd: Command,
    exchange: E,
) -> Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let chat_id = msg.chat.id;

    match cmd {
        Command::Help => {
            let keyboard = InlineKeyboardMarkup::new(vec![
                vec![
                    InlineKeyboardButton::callback("‚úÖ –°—Ç–∞—Ç—É—Å", "status"),
                    InlineKeyboardButton::callback("‚öôÔ∏è –•–µ–¥–∂",  "hedge"),
                ],
                vec![
                    InlineKeyboardButton::callback("üõ† –†–∞—Å—Ö–µ–¥–∂", "unhedge"),
                ],
            ]);
            bot.send_message(chat_id, Command::descriptions().to_string())
                .reply_markup(keyboard)
                .await?;
        }

        Command::Status => {
            bot.send_message(chat_id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –±–∏—Ä–∂–µ")
                .await?;
        }

        Command::Hedge(args) => {
            do_hedge(&bot, chat_id, args, &exchange).await?;
        }

        Command::Unhedge(args) => {
            do_unhedge(&bot, chat_id, args).await?;
        }
    }

    Ok(())
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ inline‚Äëcallback —Å–æ–±—ã—Ç–∏–π
pub async fn handle_callback<E>(
    bot: Bot,
    q: CallbackQuery,
    exchange: E,
) -> Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    if let Some(data) = q.data {
        // –±–µ—Ä—ë–º ChatId –∏–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        let chat_id = q
            .message
            .unwrap()
            .chat()
            .id;

        match data.as_str() {
            "status" => {
                bot.send_message(chat_id, "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –±–∏—Ä–∂–µ")
                    .await?;
            }
            "hedge" => {
                bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ: /hedge <—Å—É–º–º–∞> <—Å–∏–º–≤–æ–ª> <–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å %>")
                    .await?;
            }
            "unhedge" => {
                bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ: /unhedge <—Å—É–º–º–∞> <—Å–∏–º–≤–æ–ª>")
                    .await?;
            }
            _ => {}
        }

        bot.answer_callback_query(q.id).await?;
    }
    Ok(())
}

async fn do_hedge<E>(
    bot: &Bot,
    chat_id: ChatId,
    args: String,
    exchange: &E,
) -> Result<()>
where
    E: Exchange + Clone + Send + Sync + 'static,
{
    let parts: Vec<_> = args.split_whitespace().collect();
    if parts.len() != 3 {
        bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /hedge <sum> <symbol> <volatility %>")
            .await?;
        return Ok(());
    }

    let sum: f64 = parts[0].parse().unwrap_or(0.0);
    let symbol = parts[1].to_uppercase();
    let volatility: f64 = parts[2]
        .trim_end_matches('%')
        .parse::<f64>()
        .unwrap_or(0.0)
        / 100.0;

    let hedger = Hedger::new(exchange.clone());
    match hedger
        .run_hedge(HedgeRequest { sum, symbol: symbol.clone(), volatility })
        .await
    {
        Ok((spot, fut)) => {
            let text = format!(
                "–•–µ–¥–∂–∏—Ä–æ–≤–∞–Ω–∏–µ {}¬†USDT {} –ø—Ä–∏ V={:.1}%:\n‚ñ∏ –°–ø–æ—Ç¬†{:.4}\n‚ñ∏ –§—å—é—á–µ—Ä—Å¬†{:.4}",
                sum,
                symbol,
                volatility * 100.0,
                spot,
                fut,
            );
            bot.send_message(chat_id, text).await?;
        }
        Err(e) => {
            bot.send_message(chat_id, format!("‚ùå –û—à–∏–±–∫–∞: {}", e)).await?;
        }
    }
    Ok(())
}

async fn do_unhedge(
    bot: &Bot,
    chat_id: ChatId,
    args: String,
) -> Result<()>
{
    let parts: Vec<_> = args.split_whitespace().collect();
    if parts.len() != 2 {
        bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unhedge <sum> <symbol>")
            .await?;
        return Ok(());
    }
    let sum: f64 = parts[0].parse().unwrap_or(0.0);
    let symbol = parts[1].to_uppercase();
    let _ = UnhedgeRequest { sum, symbol };

    bot.send_message(
        chat_id,
        "üöß –ö–æ–º–∞–Ω–¥–∞ /unhedge –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ ‚Äî —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏",
    )
    .await?;
    Ok(())
}
